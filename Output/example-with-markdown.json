{"hierarchy":{"Components":{"AppzioUiKit":{"Forms":[],"Fullviews":[],"Styles":[],"Text":["uiKitTextHeader.php"]},"0":"BootstrapComponent.php","1":"BootstrapComponentInterface.php","ClientComponents":["Banner.php","Bottommenu.php","Calendar.php","Column.php","ConfirmationDialog.php","Div.php","Divider.php","Fieldlist.php","FormFieldBirthday.php","FormFieldList.php","FormFieldOnoff.php","FormFieldPassword.php","FormFieldText.php","FormFieldTextArea.php","FormFieldUploadImage.php","FormFieldUploadVideo.php","FullpageLoader.php","Html.php","Image.php","InfiniteScroll.php","Loader.php","Map.php","Onclick.php","Progress.php","RangeSlider.php","Row.php","Spacers.php","Swipe.php","SwipeAreaNavigation.php","SwipeNavi.php","Text.php","Timer.php","Video.php"],"2":"ComponentHelpers.php","3":"ComponentParameters.php","4":"ComponentStyles.php","Snippets":{"Forms":["FormHintedField.php"]},"images":[],"styles":["styles.MD"]},"Controllers":["BootstrapController.php","BootstrapControllerInterface.php","BootstrapPreprocessor.php"],"Models":["BootstrapModel.php","DataHelpers.php","Mobilematching.php","Session.php","Validators.php","Variables.php"],"Router":["BootstrapRouter.php","BootstrapRouterGetters.php","BootstrapRouterInterface.php"],"Views":["BootstrapView.php","BootstrapViewInterface.php","ViewGetters.php","ViewHelpers.php"]},"docs":[{"file_name":"Components\/AppzioUiKit\/Text\/uiKitTextHeader.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\AppzioUiKit\\Text","trait":"uiKitTextHeader","methods":{"uiKitTextHeader":{"variables":["$content","$parameters","$styles"],"name":"uiKitTextHeader","call":"public function uiKitTextHeader($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/BootstrapComponent.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components<\\br><\\br>","class":"BootstrapComponent implements BootstrapComponentInterface","methods":{"__construct":{"variables":["$obj"],"name":"__construct","call":"public function __construct($obj)","comment":{"summary":"BootstrapComponent constructor.","parameters":[],"links":[],"object":"","example":""}},"getErrors":{"variables":[],"name":"getErrors","call":"public function getErrors()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"addDivs":{"variables":["$divs"],"name":"addDivs","call":"public function addDivs($divs)","comment":{"summary":"Register div's to be used with this function. Takes an array with divid which points to component name (without file extension)","parameters":[],"links":[],"object":"","example":""}},"getDivs":{"variables":[],"name":"getDivs","call":"public function getDivs()","comment":{"summary":"Return divs object","parameters":[],"links":[],"object":"","example":""}}},"uses":{"BootstrapComponentInterface":{"name":"BootstrapComponentInterface","call":"use BootstrapComponentInterface"},"ClientComponents":{"name":"ClientComponents","call":"use ClientComponents"},"Snippets":{"name":"Snippets","call":"use Snippets"},"AppzioUiKit":{"name":"AppzioUiKit","call":"use AppzioUiKit<\\br><\\br>"},"BootstrapModel":{"name":"BootstrapModel","call":"use BootstrapModel"},"ViewGetters":{"name":"ViewGetters","call":"use ViewGetters"},"ViewHelpers":{"name":"ViewHelpers","call":"use ViewHelpers<\\br><\\br>"},"ImagesController":{"name":"ImagesController","call":"use ImagesController<\\br><\\br>"},"ComponentHelpers":{"name":"ComponentHelpers","call":"use ComponentHelpers"},"ComponentParameters":{"name":"ComponentParameters","call":"use ComponentParameters"},"ComponentStyles":{"name":"ComponentStyles","call":"use ComponentStyles<\\br><\\br>"},"Banner":{"name":"Banner","call":"use Banner"},"Column":{"name":"Column","call":"use Column"},"FormFieldPassword":{"name":"FormFieldPassword","call":"use FormFieldPassword"},"FormFieldText":{"name":"FormFieldText","call":"use FormFieldText"},"FormFieldTextArea":{"name":"FormFieldTextArea","call":"use FormFieldTextArea"},"FormFieldUploadImage":{"name":"FormFieldUploadImage","call":"use FormFieldUploadImage"},"FormFieldUploadVideo":{"name":"FormFieldUploadVideo","call":"use FormFieldUploadVideo<\\br><\\br>"},"Html":{"name":"Html","call":"use Html"},"Image":{"name":"Image","call":"use Image"},"InfiniteScroll":{"name":"InfiniteScroll","call":"use InfiniteScroll"},"Loader":{"name":"Loader","call":"use Loader"},"Onclick":{"name":"Onclick","call":"use Onclick<\\br><\\br>"},"Progress":{"name":"Progress","call":"use Progress"},"RangeSlider":{"name":"RangeSlider","call":"use RangeSlider"},"Row":{"name":"Row","call":"use Row"},"Text":{"name":"Text","call":"use Text"},"Video":{"name":"Video","call":"use Video"},"Fieldlist":{"name":"Fieldlist","call":"use Fieldlist<\\br><\\br>"},"FullpageLoader":{"name":"FullpageLoader","call":"use FullpageLoader"},"Spacers":{"name":"Spacers","call":"use Spacers<\\br><\\br>"},"Map":{"name":"Map","call":"use Map"},"Calendar":{"name":"Calendar","call":"use Calendar<\\br><\\br>"},"Divider":{"name":"Divider","call":"use Divider"},"Swipe":{"name":"Swipe","call":"use Swipe"},"SwipeNavi":{"name":"SwipeNavi","call":"use SwipeNavi<\\br><\\br>"},"FormFieldList":{"name":"FormFieldList","call":"use FormFieldList"},"FormFieldBirthday":{"name":"FormFieldBirthday","call":"use FormFieldBirthday"},"Bottommenu":{"name":"Bottommenu","call":"use Bottommenu"},"FormFieldOnoff":{"name":"FormFieldOnoff","call":"use FormFieldOnoff"},"Div":{"name":"Div","call":"use Div"},"ConfirmationDialog":{"name":"ConfirmationDialog","call":"use ConfirmationDialog"},"SwipeAreaNavigation":{"name":"SwipeAreaNavigation","call":"use SwipeAreaNavigation"},"Timer":{"name":"Timer","call":"use Timer<\\br><\\br>"},"formHintedField":{"name":"formHintedField","call":"use formHintedField"},"uiKitTextHeader":{"name":"uiKitTextHeader","call":"use uiKitTextHeader<\\br><\\br>"}},"public_properties":{"$phpstorm_bugfix":{"name":"$phpstorm_bugfix"},"$model":{"name":"$model"},"$errors":{"name":"$errors","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$imagesobj":{"name":"$imagesobj","comment":{"summary":"Image processor object.","parameters":[],"links":[],"object":"ImagesController","example":""}},"$varcontent":{"name":"$varcontent","comment":{"summary":"Includes currently loaded user variables in array. Normally you would use $this->getSavedVariable instead of accessing this directly. Declared public for easier debugging for certain cases.","parameters":[],"links":[],"object":"var","example":""}},"$configobj":{"name":"$configobj","comment":{"summary":"Actions configuration as defined in the web admin. All these can be overriden using $this->rewriteActionConfigField()","parameters":[],"links":[],"object":"var","example":""}},"$branchobj":{"name":"$branchobj","comment":{"summary":"Configuration array for the branch. Includes all configuration fields defined in the web admin.","parameters":[],"links":[],"object":"var","example":""}},"$router":{"name":"$router"},"$current_route":{"name":"$current_route","comment":{"summary":"Holds the currently active route information \/Controllername\/Methodname\/menuid","parameters":[],"links":[],"object":"var","example":""}},"$aspect_ratio":{"name":"$aspect_ratio","comment":{"summary":"aspect ration is screen_width \/ screen_height","parameters":[],"links":[],"object":"var","example":""}},"$screen_width":{"name":"$screen_width","comment":{"summary":"screen width in pixels","parameters":[],"links":[],"object":"var","example":""}},"$screen_height":{"name":"$screen_height","comment":{"summary":"screen height in pixels","parameters":[],"links":[],"object":"var","example":""}},"$colors":{"name":"$colors","comment":{"summary":"Includes an array of colors defined for the app \/ branch \/ action","parameters":[],"links":[],"object":"var","example":""}},"$data":{"name":"$data","comment":{"summary":"This is the data passed from the controller","parameters":[],"links":[],"object":"var","example":""}},"$color_text_color":{"name":"$color_text_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_icon_color":{"name":"$color_icon_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_background_color":{"name":"$color_background_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_dark_button_text":{"name":"$color_dark_button_text","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_top_bar_text_color":{"name":"$color_top_bar_text_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_top_bar_icon_color":{"name":"$color_top_bar_icon_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_button_more_info_color":{"name":"$color_button_more_info_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_button_more_info_icon_color":{"name":"$color_button_more_info_icon_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_item_text_color":{"name":"$color_item_text_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_top_bar_color":{"name":"$color_top_bar_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_button_color":{"name":"$color_button_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_item_color":{"name":"$color_item_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_button_text_color":{"name":"$color_button_text_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_side_menu_color":{"name":"$color_side_menu_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_side_menu_text_color":{"name":"$color_side_menu_text_color","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}},"$color_topbar_hilite":{"name":"$color_topbar_hilite","comment":{"summary":"use depreceated","parameters":[],"links":[],"object":"","example":""}}},"private_properties":{"$divs":{"name":"$divs","type":"array","comment":{"summary":"You can feed divs to be automatically included here","parameters":[],"links":[],"object":"array","example":""}}}},{"file_name":"Components\/BootstrapComponentInterface.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components<\\br><\\br>","methods":[],"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Banner.php","doc_comment":{"link":"https:\/\/google.com","summary":"Trait Banner"},"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Banner","methods":{"getBannerAd":{"variables":["$advertisingid","$size"],"name":"getBannerAd","call":"public function getBannerAd($advertisingid,$size)","comment":{"summary":"Returns an advertising banner (Google or AdColony depending on configuration)","parameters":{"$advertisingid":{"summary":"should be the adid from Google or AdColony"},"$size":{"summary":"param string $size  banner | rectangle"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Bottommenu.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Bottommenu","methods":{"getComponentBottommenu":{"variables":["$parameters","$styles"],"name":"getComponentBottommenu","call":"public function getComponentBottommenu($parameters,$styles)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}},"getItem":{"variables":["$item","$count","$current","$hilite"],"name":"getItem","call":"private function getItem($item,$count,$current,$hilite)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"Helper":{"name":"Helper","call":"use Helper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Calendar.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Calendar","methods":{"getComponentCalendar":{"variables":["$parameters","$styles"],"name":"getComponentCalendar","call":"public function getComponentCalendar($parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'date' => '337651200', \/\/ unix time\n      'variable'   => 'variablename',\n      'selection_style' => $onclick, \/\/ this must be an object\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Column.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Column","methods":{"getComponentColumn":{"variables":["$content","$parameters","$styles"],"name":"getComponentColumn","call":"public function getComponentColumn($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"array of other objects"},"$parameters":{"summary":"<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/ConfirmationDialog.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"ConfirmationDialog","methods":{"getComponentConfirmationDialog":{"variables":["$onclick_yes","$div","$text","$parameters"],"name":"getComponentConfirmationDialog","call":"public function getComponentConfirmationDialog($onclick_yes,$div,$text,$parameters)","comment":{"summary":"","parameters":{"$text":{"summary":"mixed"},"$parameters":{"summary":"param array $parameters selected_state, variable, onclick, style"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Div.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Div","methods":{"strtoupper":{"variables":[],"name":"strtoupper","call":"use function strtoupper()"},"getComponentDiv":{"variables":["$id","$parameters","$styles"],"name":"getComponentDiv","call":"public function getComponentDiv($id,$parameters,$styles)","comment":{"summary":"","parameters":{"$id":{"summary":"string"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"strtoupper":{"name":"strtoupper","call":"use strtoupper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Divider.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Divider","methods":{"strtoupper":{"variables":[],"name":"strtoupper","call":"use function strtoupper()"},"getComponentDivider":{"variables":["$parameters","$styles"],"name":"getComponentDivider","call":"public function getComponentDivider($parameters,$styles)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"strtoupper":{"name":"strtoupper","call":"use strtoupper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Fieldlist.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Fieldlist","methods":{"getComponentFormFieldList":{"variables":["$content","$parameters","$styles"],"name":"getComponentFormFieldList","call":"public function getComponentFormFieldList($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string"},"$parameters":{"summary":"<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldBirthday.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldBirthday","methods":{"getComponentFormFieldBirthday":{"variables":["$parameters","$styles"],"name":"getComponentFormFieldBirthday","call":"public function getComponentFormFieldBirthday($parameters,$styles)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldList.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldList","methods":{"is_array":{"variables":[],"name":"is_array","call":"use function is_array()"},"getComponentFormFieldSelectorList":{"variables":["$list","$parameters","$styles"],"name":"getComponentFormFieldSelectorList","call":"public function getComponentFormFieldSelectorList($list,$parameters,$styles)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"is_array":{"name":"is_array","call":"use is_array<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldOnoff.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldOnoff","methods":{"is_array":{"variables":[],"name":"is_array","call":"use function is_array()"},"getComponentFormFieldOnoff":{"variables":["$parameters","$styles"],"name":"getComponentFormFieldOnoff","call":"public function getComponentFormFieldOnoff($parameters,$styles)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"is_array":{"name":"is_array","call":"use is_array<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldPassword.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldPassword","methods":{"getComponentFormFieldPassword":{"variables":["$content","$parameters","$styles"],"name":"getComponentFormFieldPassword","call":"public function getComponentFormFieldPassword($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldText.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldText","methods":{"getComponentFormFieldText":{"variables":["$content","$parameters","$styles"],"name":"getComponentFormFieldText","call":"public function getComponentFormFieldText($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldTextArea.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldTextArea","methods":{"getComponentFormFieldTextArea":{"variables":["$field_content","$parameters","$styles"],"name":"getComponentFormFieldTextArea","call":"public function getComponentFormFieldTextArea($field_content,$parameters,$styles)","comment":{"summary":"","parameters":{"$field_content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldUploadImage.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldUploadImage","methods":{"getComponentFormFieldUploadImage":{"variables":["$field_content","$parameters","$styles"],"name":"getComponentFormFieldUploadImage","call":"public function getComponentFormFieldUploadImage($field_content,$parameters,$styles)","comment":{"summary":"","parameters":{"$field_content":{"summary":"string, should be an image file name"},"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FormFieldUploadVideo.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FormFieldUploadVideo","methods":{"getComponentFormFieldUploadVideo":{"variables":["$field_content","$parameters","$styles"],"name":"getComponentFormFieldUploadVideo","call":"public function getComponentFormFieldUploadVideo($field_content,$parameters,$styles)","comment":{"summary":"","parameters":{"$field_content":{"summary":"string, should be an video file name or stream url"},"$parameters":{"summary":"<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/FullpageLoader.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"FullpageLoader","methods":{"getComponentFullPageLoader":{"variables":["$parameters","$styles"],"name":"getComponentFullPageLoader","call":"public function getComponentFullPageLoader($parameters,$styles)","comment":{"summary":"Shows a simple loader element (spinning wheel)","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Html.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Html","methods":{"getComponentHtml":{"variables":["$content","$parameters","$styles"],"name":"getComponentHtml","call":"public function getComponentHtml($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, HTML formatted text. Note that this does not support all HTML notation"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Image.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Image","methods":{"getComponentImage":{"variables":["$filename","$parameters","$styles"],"name":"getComponentImage","call":"public function getComponentImage($filename,$parameters,$styles)","comment":{"summary":"Returns an image for the view. Feed it with a filename (can be from variable or images directory). Note that the filename which gets exposed to client is not the same that the one in the actions images directory.","parameters":{"$content":{"summary":"string, filename or url"},"$parameters":{"summary":"lazy (loads after view), tap_to_open, tap_image (image file name)"},"$styles":{"summary":"param array $styles   please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/InfiniteScroll.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"InfiniteScroll","methods":{"getInfiniteScroll":{"variables":["$content","$parameters","$styles"],"name":"getInfiniteScroll","call":"public function getInfiniteScroll($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"array of other objects"},"$parameters":{"summary":"<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Loader.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Loader","methods":{"getComponentLoader":{"variables":["$parameters","$styles"],"name":"getComponentLoader","call":"public function getComponentLoader($parameters,$styles)","comment":{"summary":"Shows a simple loader element (spinning wheel)","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Map.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Map","methods":{"getComponentMap":{"variables":["$variable","$parameters","$styles"],"name":"getComponentMap","call":"public function getComponentMap($variable,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Onclick.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Onclick","methods":{"explode":{"variables":[],"name":"explode","call":"use function explode()"},"stristr":{"variables":[],"name":"stristr","call":"use function stristr()"},"getOnclickTab":{"variables":["$number","$parameters","$saveids"],"name":"getOnclickTab","call":"public function getOnclickTab($number,$parameters,$saveids)","comment":{"summary":"When the component is clicked a certain tab should be opened","parameters":{"$number":{"summary":"int"},"$parameters":{"summary":"<code>\n      $array = array(\n      'sync_open' => '1',\n      'sync_close'   => '1',\n      'context' => 'someid', \/\/ anything with context will get pre-cached by the client\n      'back_button' => '1',\n      'id' => 'someid',\n      );\n      <\/code>"},"$saveids":{"summary":"array"}},"links":[],"object":"","example":""}},"getOnclickShowDiv":{"variables":["$divid","$parameters","$layout","$saveids"],"name":"getOnclickShowDiv","call":"public function getOnclickShowDiv($divid,$parameters,$layout,$saveids)","comment":{"summary":"When the component is clicked a div with the corresponding divid should be shown","parameters":{"$parameters":{"summary":"param array $parameters tap_to_close, transition, layout, background"}},"links":[],"object":"","example":""}},"getOnclickHideDiv":{"variables":["$divid","$parameters","$saveids"],"name":"getOnclickHideDiv","call":"public function getOnclickHideDiv($divid,$parameters,$saveids)","comment":{"summary":"When the component is clicked a div with the corresponding divid should be hidden","parameters":[],"links":[],"object":"","example":""}},"getOnclickHideElement":{"variables":["$element_id","$parameters","$saveids"],"name":"getOnclickHideElement","call":"public function getOnclickHideElement($element_id,$parameters,$saveids)","comment":{"summary":"When the component is clicked an element with the given id should be hidden","parameters":[],"links":[],"object":"","example":""}},"getOnclickShowElement":{"variables":["$element_id","$parameters","$saveids"],"name":"getOnclickShowElement","call":"public function getOnclickShowElement($element_id,$parameters,$saveids)","comment":{"summary":"When the component is clicked an element with the given id should be shown","parameters":[],"links":[],"object":"","example":""}},"getOnclickSubmit":{"variables":["$menuid","$clickparameters"],"name":"getOnclickSubmit","call":"public function getOnclickSubmit($menuid,$clickparameters)","comment":{"summary":"Clicking the component to which this is attached will trigger a submit action","parameters":[],"links":[],"object":"","example":""}},"getOnclickCompleteAction":{"variables":[],"name":"getOnclickCompleteAction","call":"public function getOnclickCompleteAction()","comment":{"summary":"Clicking the component to which this is attached will complete the current action","parameters":[],"links":[],"object":"","example":""}},"getOnclickRoute":{"variables":["$route","$persist_route","$saveparameters","$async","$clickparameters"],"name":"getOnclickRoute","call":"public function getOnclickRoute($route,$persist_route,$saveparameters,$async,$clickparameters)","comment":{"summary":"Clicking the component to which this is attached will execute the given route. Routes must be in the format Controller\/Method\/MenuId. If the format is incorrect an error will be thrown. The controller's given method will be called and the menuid will be passed in. MenuId is not required.","parameters":[],"links":[],"object":"","example":""}},"getOnclickOpenAction":{"variables":["$permaname","$actionid","$parameters","$route","$persist_route","$saveparams"],"name":"getOnclickOpenAction","call":"public function getOnclickOpenAction($permaname,$actionid,$parameters,$route,$persist_route,$saveparams)","comment":{"summary":"Clicking the component to which the returned value is attached will open a particular action. This is used to have one screen \"on top\" of the other.","parameters":[],"links":[],"object":"","example":""}},"getOnclickOpenBranch":{"variables":["$branchid","$parameters","$route","$persist_route","$saveparams"],"name":"getOnclickOpenBranch","call":"public function getOnclickOpenBranch($branchid,$parameters,$route,$persist_route,$saveparams)","comment":{"summary":"Clicking on the component that the returned value is attached to will open the given branch.","parameters":[],"links":[],"object":"","example":""}},"encryptParams":{"variables":["$persist_route","$route","$saveparameters","$actionid"],"name":"encryptParams","call":"private function encryptParams($persist_route,$route,$saveparameters,$actionid)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getOnclickImageUpload":{"variables":["$variablename","$parameters"],"name":"getOnclickImageUpload","call":"public function getOnclickImageUpload($variablename,$parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will trigger the upload image dialog. The image path will be saved in the variable passed to this method.","parameters":[],"links":[],"object":"","example":""}},"getOnclickPushPermissions":{"variables":["$parameters"],"name":"getOnclickPushPermissions","call":"public function getOnclickPushPermissions($parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will ask for push notification permissions.","parameters":[],"links":[],"object":"","example":""}},"getOnclickGoogleLogin":{"variables":["$parameters"],"name":"getOnclickGoogleLogin","call":"public function getOnclickGoogleLogin($parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will trigger the google authentication dialog","parameters":[],"links":[],"object":"","example":""}},"getOnclickGoogleLogout":{"variables":["$parameters"],"name":"getOnclickGoogleLogout","call":"public function getOnclickGoogleLogout($parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will logout the current user","parameters":[],"links":[],"object":"","example":""}},"getOnclickFacebookInvite":{"variables":["$parameters"],"name":"getOnclickFacebookInvite","call":"public function getOnclickFacebookInvite($parameters)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      array(\n        'fb_title' => 'my title',\n        'fb_message' => 'my share msg'\n      <\/code>"}},"links":[],"object":"","example":""}},"getOnclickFacebookAppInvite":{"variables":["$parameters"],"name":"getOnclickFacebookAppInvite","call":"public function getOnclickFacebookAppInvite($parameters)"},"getOnclickFacebookLogin":{"variables":["$parameters"],"name":"getOnclickFacebookLogin","call":"public function getOnclickFacebookLogin($parameters)"},"getOnclickFacebookLogout":{"variables":["$parameters"],"name":"getOnclickFacebookLogout","call":"public function getOnclickFacebookLogout($parameters)"},"getOnclickTwitterLogin":{"variables":["$parameters"],"name":"getOnclickTwitterLogin","call":"public function getOnclickTwitterLogin($parameters)"},"getOnclickClosePopup":{"variables":["$parameters"],"name":"getOnclickClosePopup","call":"public function getOnclickClosePopup($parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will close the popup defined in the parameters","parameters":[],"links":[],"object":"","example":""}},"getOnclickListBranches":{"variables":["$parameters"],"name":"getOnclickListBranches","call":"public function getOnclickListBranches($parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will make a list branches call. This call will reload the list of branches and actions. It's useful when you want to update the state of your app.","parameters":[],"links":[],"object":"","example":""}},"getOnclickLocation":{"variables":["$parameters"],"name":"getOnclickLocation","call":"public function getOnclickLocation($parameters)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'sync_open' => '1',\n      'id' => 'someid',\n      );\n      <\/code>"}},"links":[],"object":"","example":""}},"getOnclickOpenUrl":{"variables":["$url","$parameters"],"name":"getOnclickOpenUrl","call":"public function getOnclickOpenUrl($url,$parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will open the given url in the browser","parameters":{"$url":{"summary":"\/\/ valid url (can be also tel:\/\/3391282822 for example)"},"$parameters":{"summary":"<code>\n      $array = array(\n      );"}},"links":[],"object":"","example":""}},"getOnclickShowMessage":{"variables":["$title","$message","$parameters"],"name":"getOnclickShowMessage","call":"public function getOnclickShowMessage($title,$message,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickGoHome":{"variables":["$parameters"],"name":"getOnclickGoHome","call":"public function getOnclickGoHome($parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickPurchase":{"variables":["$ios_product_id","$android_product_id","$parameters"],"name":"getOnclickPurchase","call":"public function getOnclickPurchase($ios_product_id,$android_product_id,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickPurchaseRestore":{"variables":["$parameters"],"name":"getOnclickPurchaseRestore","call":"public function getOnclickPurchaseRestore($parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickBraintreePurchase":{"variables":["$productid","$parameters"],"name":"getOnclickBraintreePurchase","call":"public function getOnclickBraintreePurchase($productid,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickOpenSidemenu":{"variables":["$parameters"],"name":"getOnclickOpenSidemenu","call":"public function getOnclickOpenSidemenu($parameters)","comment":{"summary":"Clicking the component to which the returned object is attached will open the app sidemenu. This is often used when you are using a custom header and want to open the side menu when clicking on an icon.","parameters":[],"links":[],"object":"","example":""}},"getOnclickMonitorRegion":{"variables":["$beaconid","$parameters"],"name":"getOnclickMonitorRegion","call":"public function getOnclickMonitorRegion($beaconid,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickStopRegion":{"variables":["$region_id","$parameters"],"name":"getOnclickStopRegion","call":"public function getOnclickStopRegion($region_id,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickStopAllRegions":{"variables":["$parameters"],"name":"getOnclickStopAllRegions","call":"public function getOnclickStopAllRegions($parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickFindBeacons":{"variables":["$region_id","$parameters"],"name":"getOnclickFindBeacons","call":"public function getOnclickFindBeacons($region_id,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickOpenInterstitialAd":{"variables":["$adcolony_zone","$parameters"],"name":"getOnclickOpenInterstitialAd","call":"public function getOnclickOpenInterstitialAd($adcolony_zone,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickSwipeStackControl":{"variables":["$container_id","$direction","$parameters"],"name":"getOnclickSwipeStackControl","call":"public function getOnclickSwipeStackControl($container_id,$direction,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}},"getOnclickCheckSchme":{"variables":["$scheme_url","$parameters"],"name":"getOnclickCheckSchme","call":"public function getOnclickCheckSchme($scheme_url,$parameters)","comment":{"summary":"TODO","parameters":[],"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"explode":{"name":"explode","call":"use explode"},"stdClass":{"name":"stdClass","call":"use stdClass"},"stristr":{"name":"stristr","call":"use stristr<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Progress.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Progress","methods":{"getComponentProgress":{"variables":["$fill","$parameters","$styles"],"name":"getComponentProgress","call":"public function getComponentProgress($fill,$parameters,$styles)","comment":{"summary":"","parameters":{"$fill":{"summary":"this is string that indicates how far its filled (0.1 = 10%, 1 = 100%)"},"$parameters":{"summary":"<code>\n      $array = array(\n      'text_content' => 'text string',  \/\/ shown\n      'progress_image'   => 'image_file_name.png', \/\/ this is a compound of item id & action of swipe left\n      'track_image' => 'image_file_name.png', \/\/ this must be an object or an array of objects\n      'track_color' => '#FFFFFF', \/\/\n      'progress_color' => '#000000',\n      'animate' => '1' \/\/ 0\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/RangeSlider.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"RangeSlider","methods":{"getComponentRangeSlider":{"variables":["$parameters","$styles"],"name":"getComponentRangeSlider","call":"public function getComponentRangeSlider($parameters,$styles)","comment":{"summary":"","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'variable' => 'variable', \/\/ !!! REQUIRED\n      'min_value' => 1, \/\/ !!! REQUIRED\n      'max_value' => 10, \/\/ !!! REQUIRED\n      'step' => 1, \/\/ !!! REQUIRED\n      'left_track_color' => '#FFFFFF',  \/\/ shown\n      'right_track_color'   => '#FFFFFF', \/\/ this is a compound of item id & action of swipe left\n      'thumb_color' => '#000000', \/\/ this must be an object or an array of objects\n      'thumb_image' => 'imagefilename.png', \/\/\n      'track_height' => '40',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"variable -- variable name","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Row.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Row","methods":{"getComponentRow":{"variables":["$content","$parameters","$styles"],"name":"getComponentRow","call":"public function getComponentRow($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"array of other objects"},"$parameters":{"summary":"<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Spacers.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Spacers","methods":{"getComponentSpacer":{"variables":["$height","$parameters","$styles"],"name":"getComponentSpacer","call":"public function getComponentSpacer($height,$parameters,$styles)","comment":{"summary":"Shows a simple loader element (spinning wheel)","parameters":{"$parameters":{"summary":"<code>\n      $array = array(\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}},"getComponentVerticalSpacer":{"variables":["$width","$parameters","$styles"],"name":"getComponentVerticalSpacer","call":"public function getComponentVerticalSpacer($width,$parameters,$styles)"}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Swipe.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Swipe","methods":{"strtoupper":{"variables":[],"name":"strtoupper","call":"use function strtoupper()"},"getComponentSwipe":{"variables":["$pages","$parameters","$styles"],"name":"getComponentSwipe","call":"public function getComponentSwipe($pages,$parameters,$styles)","comment":{"summary":"","parameters":{"$pages":{"summary":"array"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"strtoupper":{"name":"strtoupper","call":"use strtoupper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/SwipeAreaNavigation.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"SwipeAreaNavigation","methods":{"strtoupper":{"variables":[],"name":"strtoupper","call":"use function strtoupper()"},"getComponentSwipeAreaNavigation":{"variables":["$active_color","$inactive_color","$parameters","$styles"],"name":"getComponentSwipeAreaNavigation","call":"public function getComponentSwipeAreaNavigation($active_color,$inactive_color,$parameters,$styles)","comment":{"summary":"","parameters":{"$active_color":{"summary":"string"},"$inactive_color":{"summary":"string"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"strtoupper":{"name":"strtoupper","call":"use strtoupper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/SwipeNavi.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"SwipeNavi","methods":{"strtoupper":{"variables":[],"name":"strtoupper","call":"use function strtoupper()"},"getComponentSwipeNavi":{"variables":["$totalcount","$currentitem","$color","$parameters","$styles"],"name":"getComponentSwipeNavi","call":"public function getComponentSwipeNavi($totalcount,$currentitem,$color,$parameters,$styles)","comment":{"summary":"","parameters":{"$totalcount":{"summary":"int"},"$currentitem":{"summary":"int"},"$color":{"summary":"string"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"strtoupper":{"name":"strtoupper","call":"use strtoupper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Text.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Text","methods":{"strtoupper":{"variables":[],"name":"strtoupper","call":"use function strtoupper()"},"getComponentText":{"variables":["$content","$parameters","$styles"],"name":"getComponentText","call":"public function getComponentText($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView"},"strtoupper":{"name":"strtoupper","call":"use strtoupper<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Timer.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Timer","methods":{"getTimer":{"variables":["$content","$parameters","$styles"],"name":"getTimer","call":"public function getTimer($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"array of other objects"},"$parameters":{"summary":"<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ClientComponents\/Video.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\ClientComponents","trait":"Video","methods":{"getComponentVideo":{"variables":["$content","$parameters","$styles"],"name":"getComponentVideo","call":"public function getComponentVideo($content,$parameters,$styles)","comment":{"summary":"","parameters":{"$content":{"summary":"string, no support for line feeds"},"$parameters":{"summary":"<code>\n      $array = array(\n      'repeat' => 'style-class-name',\n      'autostart'   => 'variablename',\n      'showplayer' => $onclick, \/\/ this must be an object or an array of objects\n      'loop' => 'style-class-name',\n      );\n      <\/code>"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":[],"object":"","example":""}}},"uses":{"BootstrapView":{"name":"BootstrapView","call":"use BootstrapView<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/ComponentHelpers.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components<\\br><\\br>","trait":"ComponentHelpers","methods":{"array_search":{"variables":[],"name":"array_search","call":"use function array_search()"},"is_numeric":{"variables":[],"name":"is_numeric","call":"use function is_numeric()"},"is_string":{"variables":[],"name":"is_string","call":"use function is_string()"},"configureDefaults":{"variables":["$obj"],"name":"configureDefaults","call":"public function configureDefaults($obj)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"addParam":{"variables":["$name","$params","$default"],"name":"addParam","call":"public function addParam($name,$params,$default)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getImageFileName":{"variables":["$image","$params"],"name":"getImageFileName","call":"public function getImageFileName($image,$params)","comment":{"summary":"","parameters":{"$params":{"summary":"param array $params isvar, width, height, crop, defaultimage, debug"}},"links":[],"object":"","example":""}}},"uses":{"array_search":{"name":"array_search","call":"use array_search"},"is_numeric":{"name":"is_numeric","call":"use is_numeric"},"is_string":{"name":"is_string","call":"use is_string<\\br><\\br>"}},"public_properties":{"$model":{"name":"$model","comment":{"summary":"","parameters":[],"links":[],"object":"\\Bootstrap\\Models\\BootstrapModel $this->model","example":""}},"$actionid":{"name":"$actionid"},"$action_id":{"name":"$action_id"}},"private_properties":[]},{"file_name":"Components\/ComponentParameters.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components<\\br><\\br>","trait":"ComponentParameters","methods":{"attachParameters":{"variables":["$obj","$parameters","$allowed","$required"],"name":"attachParameters","call":"public function attachParameters($obj,$parameters,$allowed,$required)","comment":{"summary":"This is a helper for attaching component parameters and placeholder for parameter related documentation.","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Components\/ComponentStyles.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components<\\br><\\br>","trait":"ComponentStyles","methods":{"attachStyles":{"variables":["$obj","$styles"],"name":"attachStyles","call":"public function attachStyles($obj,$styles)","comment":{"summary":"Used by components to attach style parameters. Depending on component, different parameters and styles are supported. This includes documentation for all known parameters and styles, check for individual component for which parameters and styles are supported.<\\br><\\br>Style notations work the same way in the styles.json files. Generally, its recommended to use the styles.json file instead of the inline styles, as the inline styles increase the client payload significantly. styles.json file is loaded by the client only when its been updated, so normally clients would get this styles file upon login and they don't need to fetch it again.","parameters":{"$styles":{"summary":"<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"}},"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Components\/Snippets\/Forms\/FormHintedField.php","doc_comment":false,"doc_namespace":"Bootstrap\\Components\\Snippets\\Forms","trait":"FormHintedField","methods":{"FormHintedField":{"variables":["$field_title","$variablename","$type","$parameters","$styles"],"name":"FormHintedField","call":"public function FormHintedField($field_title,$variablename,$type,$parameters,$styles)","comment":{"summary":"Shows a field with a title with predefined styling. Styling can be overriden in your own styles.json either for the entire app, or for your specific action. Component checks for your model for any validation errors and displays the validation error inline if it exists. Pointer is the variable name.","parameters":{"$field_title":{"summary":"field title"},"$variablename":{"summary":"variable for this field"},"$type":{"summary":"param string $type  text, textarea, password, noedit"},"$parameters":{"summary":"param array $parameters  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentParameter"},"$styles":{"summary":"param array $styles  please see the link for more information about parameters","link":"Bootstrap\\Components\\ComponentStyles"}},"links":["https:\/\/docs.appzio.com","https:\/\/appzio.com"],"object":"","example":""}}},"uses":{"BootstrapComponent":{"name":"BootstrapComponent","call":"use BootstrapComponent<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Components\/styles\/styles.MD","markup":"# Working with styles and style sheets\nStyles in Appzio work very similar to CSS styles and most of the notation is identical with CSS. Styles are not however CSS, they get converted to native formatting in iOS and Android. Appzio supports both inline styles and external style sheets.\n\nIt is recommended to use the styles.json file instead of the inline styles, as the inline styles increase the client payload significantly. Styles.json file is loaded by the client only when its been updated, so normally clients would get this styles file upon login and they don't need to fetch it again.\n\nExample of style:\n```\n\"message-status-text\": {\n    \"font-size\": \"10\",\n    \"color\": \"#949494\",\n    \"text-align\": \"right\",\n    \"margin\": \"2 80 2 15\"\n}\n```\n\n## Style files\nStyle files reside either on the action's main level at styles directory and need to be named with the actions shortname. So if your action is called actionMexample, the style file should be at `styles\/Mexample.json`. In most cases styles are at theme's directory at `themes\/mytheme\/styles\/Mexample.json`.\n\n## Inline styles\nYou can define inline style like this:\n```\n $this->getComponentText('My Text',$parameters,array(\n   'margin' => '0 40 0 40'\n );\n```\n\nGeneral cases where you would use an inline style is when you need to rely on device width for the style definition. For example:\n```\n $width = $this->screen_width - 120;\n $margin = '0 ' .$width .' 0 ' .$width;\n \n $this->getComponentText('My Text',$parameters,array(\n   'margin' => $margin\n );\n```\n\n## Style inheritance\nYou can use style inheritance in both inline styles and in style sheets. Note though that using multiple inheritances can make debugging more difficult. Using our previous example, you could define it in the following way:\n```\n $width = $this->screen_width - 120;\n $margin = '0 ' .$width .' 0 ' .$width;\n \n $this->getComponentText('My Text',$parameters,array(\n   'margin' => $margin,\n   'parent_style' => 'my_text_style'\n );\n```\nOr inside the style file:\n```\n\"my_text_style\":{\n   \"font-ios\": \"Roboto\",\n   \"font-android\": \"Roboto\"\n},\n\"message-status-text\": {\n    \"parent_style\": \"my_text_style\",\n    \"font-size\": \"10\",\n    \"color\": \"#949494\",\n    \"text-align\": \"right\",\n    \"margin\": \"2 80 2 15\"\n}\n```\n\n## Supported tags\n\n     * 'margin' => '0 0 0 0'\n     * 'padding' => '0 0 0 0'\n     * 'width' => '200' \/\/ or 100%\n     * 'height' => '400'\n     * 'max_height' => '500'\n     * 'background-color' => '#ffffff'\n     * 'background-image' => 'filename.png'\n     * 'background-size' => 'cover' \/\/ or 'contain' 'top' (default)\n     * 'crop' => 'round' \/\/ or 'yes'\n     * 'vertical-align' => 'middle'\n     * 'text-align' => 'center'\n     * 'font-size' => '14'\n     * 'font-ios' => 'Roboto'\n     * 'font-weight' => 'Bold'\n     * 'font-style' => 'Italic'\n     * 'font-android' => 'Roboto'\n     * 'color' => '#000000'\n     * 'white-space' => 'nowrap'\n     * 'children_style' => 'style-class-name'\n     * 'floating' => '1'\n     * 'float' => 'right'\n     * 'parent_style' => 'style-class-name'\n     * 'shadow-color' => '#000000'\n     * 'shadow-offset' => '0 1'\n     * 'shadow-radius' => '5'\n     * 'border-width' => '1'\n     * 'border-color' => '#000000'\n     * 'border-radius' => '4'\n     * 'opacity' => '0.4'"},{"file_name":"Controllers\/BootstrapController.php","doc_comment":false,"doc_namespace":"Bootstrap\\Controllers<\\br><\\br>","class":"BootstrapController implements BootstrapControllerInterface","methods":{"__construct":{"variables":["$obj"],"name":"__construct","call":"public function __construct($obj)","comment":{"summary":"BootstrapController constructor.","parameters":[],"links":[],"object":"","example":""}},"actionDefault":{"variables":[],"name":"actionDefault","call":"public function actionDefault()","comment":{"summary":"Default entry point for controllers","parameters":[],"links":[],"object":"","example":""}},"viewError":{"variables":[],"name":"viewError","call":"public function viewError()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getMenuId":{"variables":[],"name":"getMenuId","call":"public function getMenuId()","comment":{"summary":"Return current menu id if sent","parameters":[],"links":[],"object":"","example":""}},"collectLocation":{"variables":[],"name":"collectLocation","call":"public function collectLocation()","comment":{"summary":"Collects location once","parameters":[],"links":[],"object":"","example":""}}},"uses":{"BootstrapRouter":{"name":"BootstrapRouter","call":"use BootstrapRouter"},"stdClass":{"name":"stdClass","call":"use stdClass<\\br><\\br>"}},"public_properties":{"$phpstorm_bugfix":{"name":"$phpstorm_bugfix"},"$view":{"name":"$view"},"$model":{"name":"$model"},"$router":{"name":"$router"},"$current_tab":{"name":"$current_tab","comment":{"summary":"Current active tab","parameters":[],"links":[],"object":"var","example":""}},"$action_name":{"name":"$action_name","comment":{"summary":"Active action name","parameters":[],"links":[],"object":"mixed","example":""}},"$playid":{"name":"$playid","comment":{"summary":"Current logged user id","parameters":[],"links":[],"object":"var","example":""}},"$onloads":{"name":"$onloads","comment":{"summary":"Actions executed on load","parameters":[],"links":[],"object":"var","example":""}},"$no_output":{"name":"$no_output","type":"false","comment":{"summary":"set this to true to suppress output (for async operations)","parameters":[],"links":[],"object":"","example":""}}},"private_properties":{"$view_name":{"name":"$view_name","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}}}},{"file_name":"Controllers\/BootstrapControllerInterface.php","doc_comment":false,"doc_namespace":"Bootstrap\\Controllers<\\br><\\br>","methods":{"actionDefault":{"variables":[],"name":"actionDefault","call":"public function actionDefault()","comment":{"summary":"Default controllers entry point","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Controllers\/BootstrapPreprocessor.php","doc_comment":null,"doc_namespace":false,"class":"BootstrapPreprocessor","methods":{"__construct":{"variables":[],"name":"__construct","call":"public function __construct()","comment":{"summary":"BootstrapPreprocessor constructor.","parameters":[],"links":[],"object":"","example":""}},"loadStyles":{"variables":[],"name":"loadStyles","call":"public function loadStyles()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"Process":{"variables":["$data"],"name":"Process","call":"public function Process($data)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"saveStyles":{"variables":["$playobj"],"name":"saveStyles","call":"public function saveStyles($playobj)","comment":{"summary":"Save generated styles for the current user","parameters":[],"links":[],"object":"","example":""}},"doProcessing":{"variables":["$data"],"name":"doProcessing","call":"private function doProcessing($data)","comment":{"summary":"Process styles","parameters":[],"links":[],"object":"","example":""}},"addNewStyle":{"variables":["$md5","$stylecontent"],"name":"addNewStyle","call":"private function addNewStyle($md5,$stylecontent)","comment":{"summary":"Add new style to list","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":{"$styles":{"name":"$styles"},"$gid":{"name":"$gid"},"$playid":{"name":"$playid"},"$mobileobj":{"name":"$mobileobj"},"$playobj":{"name":"$playobj"}},"private_properties":[]},{"file_name":"Models\/BootstrapModel.php","doc_comment":false,"doc_namespace":"Bootstrap\\Models<\\br><\\br>","class":"BootstrapModel extends CActiveRecord","methods":{"array_flip":{"variables":[],"name":"array_flip","call":"use function array_flip()"},"is_array":{"variables":[],"name":"is_array","call":"use function is_array()"},"is_string":{"variables":[],"name":"is_string","call":"use function is_string()"},"__construct":{"variables":["$obj"],"name":"__construct","call":"public function __construct($obj)","comment":{"summary":"BootstrapModel constructor.","parameters":[],"links":[],"object":"","example":""}},"tableName":{"variables":[],"name":"tableName","call":"public function tableName()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"primaryKey":{"variables":[],"name":"primaryKey","call":"public function primaryKey()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"model":{"variables":["$className"],"name":"model","call":"public static function model($className)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"relations":{"variables":[],"name":"relations","call":"public function relations()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"attributeLabels":{"variables":[],"name":"attributeLabels","call":"public function attributeLabels()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getConfigParam":{"variables":["$param","$default"],"name":"getConfigParam","call":"public function getConfigParam($param,$default)","comment":{"summary":"Returns a configuration parameter as defined in action's web configuration panel. You can rewrite any configuration parameters in your action using $this->rewriteActionConfigField('fieldname','newvalue'); Typical parameters you would use are: backarrow, background_color, hide_menubar, subject, share_title, share_description, share_image, hide_scrollbar, pull_to_refresh, transparent_statusbar","parameters":[],"links":[],"object":"","example":""}},"getValidationErrors":{"variables":[],"name":"getValidationErrors","call":"public function getValidationErrors()","comment":{"summary":"Get an array of validation errors. Errors are usually filled in from the model upon form validation.","parameters":[],"links":[],"object":"","example":""}},"getAllConfigParams":{"variables":[],"name":"getAllConfigParams","call":"public function getAllConfigParams()","comment":{"summary":"Returns an associative array of the configuration object.","parameters":[],"links":[],"object":"","example":""}},"reloadData":{"variables":[],"name":"reloadData","call":"public function reloadData()","comment":{"summary":"Reloads all variable data and action data","parameters":[],"links":[],"object":"","example":""}},"localize":{"variables":["$string"],"name":"localize","call":"public function localize($string)","comment":{"summary":"Localize a string","parameters":[],"links":[],"object":"","example":""}},"getCurrentActionPermaname":{"variables":[],"name":"getCurrentActionPermaname","call":"public function getCurrentActionPermaname()","comment":{"summary":"Get the active action's permaname (slug) if it is set","parameters":[],"links":[],"object":"","example":""}},"getActionidByPermaname":{"variables":["$name"],"name":"getActionidByPermaname","call":"public function getActionidByPermaname($name)","comment":{"summary":"Returns mapping between permanent name & action id","parameters":[],"links":[],"object":"","example":""}},"rewriteActionConfigField":{"variables":["$field","$newcontent"],"name":"rewriteActionConfigField","call":"public function rewriteActionConfigField($field,$newcontent)","comment":{"summary":"Rewrite configuration field by key","parameters":{"$field":{"summary":"- backarrow\n      - hide_subject\n      - hide_menubar\n      - background_image_portrait"}},"links":[],"object":"","example":""}},"rewriteActionField":{"variables":["$field","$newcontent"],"name":"rewriteActionField","call":"public function rewriteActionField($field,$newcontent)","comment":{"summary":"Reconfigure any action property","parameters":[],"links":[],"object":"","example":""}},"getItemId":{"variables":[],"name":"getItemId","call":"public function getItemId()","comment":{"summary":"This will get the current item id, as triggered initially by menuid. ie. if you use for example open-action with id, you should define id like this: controller\/function\/$id this id gets saved to session so it will be remembered even though you would have different menu commands inside the same context. It is tied to action_id","parameters":[],"links":[],"object":"","example":""}},"getMenuId":{"variables":[],"name":"getMenuId","call":"public function getMenuId()","comment":{"summary":"Returns the currently called menuid if set","parameters":[],"links":[],"object":"","example":""}},"getActionId":{"variables":[],"name":"getActionId","call":"public function getActionId()","comment":{"summary":"Current action id (not the play action, but the actual configuration object id)","parameters":[],"links":[],"object":"","example":""}},"getValidationError":{"variables":["$name"],"name":"getValidationError","call":"public function getValidationError($name)","comment":{"summary":"Return validation error from the array by name","parameters":[],"links":[],"object":"","example":""}},"setError":{"variables":["$string"],"name":"setError","call":"public function setError($string)","comment":{"summary":"Add error in the errors object","parameters":[],"links":[],"object":"","example":""}},"getRuntimeErrors":{"variables":[],"name":"getRuntimeErrors","call":"public function getRuntimeErrors()","comment":{"summary":"Return errors object","parameters":[],"links":[],"object":"","example":""}},"flushActionRoutes":{"variables":["$actionid","$actionpermaname"],"name":"flushActionRoutes","call":"public function flushActionRoutes($actionid,$actionpermaname)","comment":{"summary":"Remove routes from the session","parameters":[],"links":[],"object":"","example":""}}},"uses":{"array_flip":{"name":"array_flip","call":"use array_flip"},"BootstrapRouter":{"name":"BootstrapRouter","call":"use BootstrapRouter"},"CActiveRecord":{"name":"CActiveRecord","call":"use CActiveRecord"},"Aevariable":{"name":"Aevariable","call":"use Aevariable"},"AeplayVariable":{"name":"AeplayVariable","call":"use AeplayVariable"},"is_array":{"name":"is_array","call":"use is_array"},"is_string":{"name":"is_string","call":"use is_string<\\br><\\br>"},"Variables":{"name":"Variables","call":"use Variables"},"Session":{"name":"Session","call":"use Session"},"DataHelpers":{"name":"DataHelpers","call":"use DataHelpers"},"Validators":{"name":"Validators","call":"use Validators"},"Mobilematching":{"name":"Mobilematching","call":"use Mobilematching<\\br><\\br>"}},"public_properties":{"$configobj":{"name":"$configobj","comment":{"summary":"Actions configuration as defined in the web admin. All these can be overriden using $this->rewriteActionConfigField()","parameters":[],"links":[],"object":"var","example":""}},"$vars":{"name":"$vars","comment":{"summary":"Array of currently loaded user variables in name - id pairs. Should be accessed with the methods declared in the Variables trait, not directly. Declared public for easier debugging for certain cases.","parameters":[],"links":[],"object":"var","example":""}},"$varcontent":{"name":"$varcontent","comment":{"summary":"Includes currently loaded user variables in array. Normally you would use $this->getSavedVariable instead of accessing this directly. Declared public for easier debugging for certain cases.","parameters":[],"links":[],"object":"var","example":""}},"$session_storage":{"name":"$session_storage","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$click_parameters_to_save":{"name":"$click_parameters_to_save","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$localizationComponent":{"name":"$localizationComponent"},"$submitvariables":{"name":"$submitvariables","comment":{"summary":"Array containing the submitted variables for a certain request. Submitting a form using a \"submit-form-content\" action will allow you to access all of the form variables from this array. Should be used in the model for validation and storing.","parameters":[],"links":[],"object":"var","example":""}},"$actionobj":{"name":"$actionobj","comment":{"summary":"Array containing the configuration specified in the web admin. Fields can be rewritten using the rewriteActionField() method","parameters":[],"links":[],"object":"var","example":""}},"$playid":{"name":"$playid","comment":{"summary":"Currently logged in user id","parameters":[],"links":[],"object":"var","example":""}},"$appid":{"name":"$appid","comment":{"summary":"Current active application id","parameters":[],"links":[],"object":"var","example":""}},"$userid":{"name":"$userid","comment":{"summary":"Not to be confused with playid, this is installation specific id - the phone on which the app is installed","parameters":[],"links":[],"object":"var","example":""}},"$router":{"name":"$router"},"$action_id":{"name":"$action_id","comment":{"summary":"Id of the currently active action","parameters":[],"links":[],"object":"var","example":""}},"$actionid":{"name":"$actionid","comment":{"summary":"Id of the currently active action","parameters":[],"links":[],"object":"var","example":""}},"$menus":{"name":"$menus","comment":{"summary":"Array containing all of the application menus. An application can have multiple menus defined for different purposes and used in different places in the app - side, top, bottom.","parameters":[],"links":[],"object":"var","example":""}},"$msgcount":{"name":"$msgcount","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$bottom_menu_id":{"name":"$bottom_menu_id","comment":{"summary":"Id of the application bottom menu","parameters":[],"links":[],"object":"var","example":""}},"$branchobj":{"name":"$branchobj","comment":{"summary":"Configuration array for the branch. Includes all configuration fields defined in the web admin.","parameters":[],"links":[],"object":"var","example":""}},"$validation_errors":{"name":"$validation_errors","type":"array","comment":{"summary":"This is a general place for storing validation errors. Usually used from the controller for conditional checks and to display errors.","parameters":[],"links":[],"object":"array","example":""}},"$permanames":{"name":"$permanames","comment":{"summary":"Array consisting of action permanames (slugs) - action id pairs","parameters":[],"links":[],"object":"var","example":""}},"$rewriteconfigs":{"name":"$rewriteconfigs","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$rewriteactionfield":{"name":"$rewriteactionfield","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$mobilematchingobj":{"name":"$mobilematchingobj","comment":{"summary":"The model containing the matching related functionality. Matching is used not only in dating applications but in all other apps that have similar business logic i.e. tenants and properties","parameters":[],"links":[],"object":"\\MatchingMobileproperties","example":""}},"$mobilematchingmetaobj":{"name":"$mobilematchingmetaobj","comment":{"summary":"Matching meta model","parameters":[],"links":[],"object":"var","example":""}},"$bottom_menu_config":{"name":"$bottom_menu_config","comment":{"summary":"You can feed following kind of config array for bottom_menu_config <code> $config['flags']['approvals'] = $this->getAdultNotificationCount(); $config['flags']['notifications'] = NotificationsModel::getMyNotificationCount($this->playid); $config['background_color'] = '#ffffff'; $config['text_color'] = '#000000'; $config['hide_text'] = true; $config['flag_color'] = '#3EB439'; $config['flag_text_color'] = '#ffffff'; <\/code>","parameters":[],"links":[],"object":"","example":""}}},"private_properties":{"$current_itemid":{"name":"$current_itemid","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$errors":{"name":"$errors","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}}}},{"file_name":"Models\/DataHelpers.php","doc_comment":false,"doc_namespace":"Bootstrap\\Models<\\br><\\br>","trait":"DataHelpers","methods":{"array_flip":{"variables":[],"name":"array_flip","call":"use function array_flip()"},"getCountryCodes":{"variables":[],"name":"getCountryCodes","call":"public function getCountryCodes()","comment":{"summary":"Get country codes from JSON file","parameters":[],"links":[],"object":"","example":""}},"getCountryCode":{"variables":[],"name":"getCountryCode","call":"public function getCountryCode()","comment":{"summary":"Returns country code based on users location","parameters":[],"links":[],"object":"","example":""}},"setUserAddress":{"variables":[],"name":"setUserAddress","call":"public function setUserAddress()","comment":{"summary":"Set current user address","parameters":[],"links":[],"object":"","example":""}},"findPlayFromVariables":{"variables":["$var1","$var2","$var1_value","$var2_value"],"name":"findPlayFromVariables","call":"public function findPlayFromVariables($var1,$var2,$var1_value,$var2_value)","comment":{"summary":"Find user id from variable values","parameters":[],"links":[],"object":"","example":""}},"findPlayFromVariable":{"variables":["$varname","$varvalue","$include_current_user"],"name":"findPlayFromVariable","call":"public function findPlayFromVariable($varname,$varvalue,$include_current_user)","comment":{"summary":"Note: this will return only the latest user with this value & it will exclude the current user by default","parameters":[],"links":[],"object":"","example":""}}},"uses":{"array_flip":{"name":"array_flip","call":"use array_flip"},"ThirdpartyServices":{"name":"ThirdpartyServices","call":"use ThirdpartyServices<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Models\/Mobilematching.php","doc_comment":false,"doc_namespace":"Bootstrap\\Models<\\br><\\br>","trait":"Mobilematching","methods":{"array_flip":{"variables":[],"name":"array_flip","call":"use function array_flip()"},"is_numeric":{"variables":[],"name":"is_numeric","call":"use function is_numeric()"},"initMobileMatching":{"variables":["$otheruserid","$debug"],"name":"initMobileMatching","call":"public function initMobileMatching($otheruserid,$debug)","comment":{"summary":"Initialize model. This model contains basic matching\/unmatching functionality","parameters":[],"links":[],"object":"","example":""}}},"uses":{"Aegame":{"name":"Aegame","call":"use Aegame"},"Aevariable":{"name":"Aevariable","call":"use Aevariable"},"array_flip":{"name":"array_flip","call":"use array_flip"},"is_numeric":{"name":"is_numeric","call":"use is_numeric<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Models\/Session.php","doc_comment":false,"doc_namespace":"Bootstrap\\Models<\\br><\\br>","trait":"Session","methods":{"setRoute":{"variables":["$route","$persist_route","$actionid"],"name":"setRoute","call":"public function setRoute($route,$persist_route,$actionid)","comment":{"summary":"Save route to session","parameters":[],"links":[],"object":"","example":""}},"sessionSetArray":{"variables":["$array"],"name":"sessionSetArray","call":"public function sessionSetArray($array)","comment":{"summary":"Save an array in session storage","parameters":[],"links":[],"object":"","example":""}},"sessionSet":{"variables":["$key","$value"],"name":"sessionSet","call":"public function sessionSet($key,$value)","comment":{"summary":"Save key value pair in session","parameters":[],"links":[],"object":"","example":""}},"sessionGet":{"variables":["$key"],"name":"sessionGet","call":"public function sessionGet($key)","comment":{"summary":"Retrieve value from session by key","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Models\/Validators.php","doc_comment":false,"doc_namespace":"Bootstrap\\Models<\\br><\\br>","trait":"Validators","methods":{"validateEmail":{"variables":["$email"],"name":"validateEmail","call":"public function validateEmail($email)","comment":{"summary":"Email validation","parameters":[],"links":[],"object":"","example":""}},"validateWebsite":{"variables":["$url"],"name":"validateWebsite","call":"public function validateWebsite($url)","comment":{"summary":"Website validation","parameters":[],"links":[],"object":"","example":""}},"validatePassword":{"variables":["$password","$strict"],"name":"validatePassword","call":"public function validatePassword($password,$strict)","comment":{"summary":"Password validation","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Models\/Variables.php","doc_comment":null,"doc_namespace":"Bootstrap\\Models<\\br><\\br>","trait":"Variables","methods":{"array_flip":{"variables":[],"name":"array_flip","call":"use function array_flip()"},"is_numeric":{"variables":[],"name":"is_numeric","call":"use function is_numeric()"},"getVariableId":{"variables":["$varname"],"name":"getVariableId","call":"public function getVariableId($varname)","comment":{"summary":"Return variable id by name","parameters":[],"links":[],"object":"","example":""}},"getVariableName":{"variables":["$varid"],"name":"getVariableName","call":"public function getVariableName($varid)","comment":{"summary":"Return variable name by id","parameters":[],"links":[],"object":"","example":""}},"getGlobalVariableByName":{"variables":["$varname"],"name":"getGlobalVariableByName","call":"public function getGlobalVariableByName($varname)","comment":{"summary":"Return global variable for app by id","parameters":[],"links":[],"object":"","example":""}},"saveNamedVariables":{"variables":["$variables","$exclude"],"name":"saveNamedVariables","call":"public function saveNamedVariables($variables,$exclude)","comment":{"summary":"Save a list of variables","parameters":[],"links":[],"object":"","example":""}},"getSavedVariable":{"variables":["$varname","$default"],"name":"getSavedVariable","call":"public function getSavedVariable($varname,$default)","comment":{"summary":"Returned saved variable for current user If not stored in memory will be queried from the database","parameters":[],"links":[],"object":"","example":""}},"getVariables":{"variables":["$gid"],"name":"getVariables","call":"public static function getVariables($gid)","comment":{"summary":"Get all variables for the given application","parameters":[],"links":[],"object":"","example":""}},"getVariableContent":{"variables":["$playid"],"name":"getVariableContent","call":"public static function getVariableContent($playid)","comment":{"summary":"Get all variables for a user or return false","parameters":[],"links":[],"object":"","example":""}},"getSubmittedVariableByName":{"variables":["$varname","$default"],"name":"getSubmittedVariableByName","call":"public function getSubmittedVariableByName($varname,$default)","comment":{"summary":"Get a submitted variable by name. Variables are usually submitted when you trigger a \"submit-form-content\" action","parameters":[],"links":[],"object":"","example":""}},"getAllSubmittedVariables":{"variables":[],"name":"getAllSubmittedVariables","call":"public function getAllSubmittedVariables()","comment":{"summary":"Returns all submitted variables","parameters":[],"links":[],"object":"","example":""}},"getAllSubmittedVariablesByName":{"variables":[],"name":"getAllSubmittedVariablesByName","call":"public function getAllSubmittedVariablesByName()","comment":{"summary":"Returns all submitted variables with names as key","parameters":[],"links":[],"object":"","example":""}},"saveVariables":{"variables":["$vars","$playid","$exclude"],"name":"saveVariables","call":"public static function saveVariables($vars,$playid,$exclude)","comment":{"summary":"Save a list of variables for given user","parameters":[],"links":[],"object":"","example":""}},"saveVariable":{"variables":["$variable","$value"],"name":"saveVariable","call":"public function saveVariable($variable,$value)","comment":{"summary":"Save single variable for current active user","parameters":[],"links":[],"object":"","example":""}},"deleteVariable":{"variables":["$variablename"],"name":"deleteVariable","call":"public function deleteVariable($variablename)","comment":{"summary":"Delete variable for current active user","parameters":[],"links":[],"object":"","example":""}},"loadVariables":{"variables":[],"name":"loadVariables","call":"public function loadVariables()","comment":{"summary":"Load variables for the application","parameters":[],"links":[],"object":"","example":""}},"loadVariableContent":{"variables":["$force"],"name":"loadVariableContent","call":"public function loadVariableContent($force)","comment":{"summary":"Load variable content for the application","parameters":[],"links":[],"object":"","example":""}},"foreignVariablesGet":{"variables":["$playid"],"name":"foreignVariablesGet","call":"public function foreignVariablesGet($playid)","comment":{"summary":"Retrieve all variables, which belong to a certain \"playid\" If you intend to use this method without passing a parameter, you may consider referring to $this->varcontent instead","parameters":[],"links":[],"object":"","example":""}},"foreignVariableSave":{"variables":["$variablename","$value","$playid"],"name":"foreignVariableSave","call":"public function foreignVariableSave($variablename,$value,$playid)","comment":{"summary":"Save variable for given user","parameters":[],"links":[],"object":"","example":""}}},"uses":{"Aegame":{"name":"Aegame","call":"use Aegame"},"Aevariable":{"name":"Aevariable","call":"use Aevariable"},"array_flip":{"name":"array_flip","call":"use array_flip"},"is_numeric":{"name":"is_numeric","call":"use is_numeric<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Router\/BootstrapRouter.php","doc_comment":{"summary":"This class handles the routing for actions. Router will always first search for theme & mode files and revert to action main level if they are missing and finally to default Controller.php, View.php & Models.php. When creating actions and themes, make sure that the routes are defined correctly, any misdefined route will cause an error.<\\br><\\br>Action modes are defined in the action's web configuration (and need to be set in the form file).<\\br><\\br>If action has permanent route active, it will use that. Permanent routes are saved into session, so if your action is stuck on a wrong route, you can use the debug action to clear all session values to clear the routes also. There is also a controller method for clearing action's routes called $this->flushActionRoutes();<\\br><\\br>Class BootstrapRouter"},"doc_namespace":"Bootstrap\\Router<\\br><\\br>","class":"BootstrapRouter implements BootstrapRouterInterface","methods":{"__construct":{"variables":["$obj"],"name":"__construct","call":"public function __construct($obj)","comment":{"summary":"BootstrapRouter constructor.","parameters":[],"links":[],"object":"","example":""}},"checkExistence":{"variables":["$primary","$secondary"],"name":"checkExistence","call":"private function checkExistence($primary,$secondary)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getController":{"variables":["$class"],"name":"getController","call":"public function getController($class)","comment":{"summary":"Controller routing logic: 1. look for active route inside the theme<\\br><\\br>2. look for active route on the main level<\\br><\\br>3. look for mode inside the the theme<\\br><\\br>4. look for mode inside the main level<\\br><\\br>5. look for default controller inside the theme<\\br><\\br>6. look for default controller on the main level","parameters":[],"links":[],"object":"","example":""}},"getComponent":{"variables":["$class"],"name":"getComponent","call":"public function getComponent($class)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getMainPath":{"variables":[],"name":"getMainPath","call":"private function getMainPath()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getView":{"variables":["$class"],"name":"getView","call":"public function getView($class)","comment":{"summary":"","parameters":{"$class":{"summary":"class hierarchy coming from ArticleFactory"}},"links":[],"object":"","example":""}},"configureNames":{"variables":["$route","$include_menuid"],"name":"configureNames","call":"private function configureNames($route,$include_menuid)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"setRoute":{"variables":[],"name":"setRoute","call":"private function setRoute()","comment":{"summary":"if current routing is marked to be persistent and is not overriden by the current menu call, we will use the currently active route","parameters":[],"links":[],"object":"","example":""}},"prepareView":{"variables":[],"name":"prepareView","call":"public function prepareView()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}}},"uses":{"BootstrapRouterGetters":{"name":"BootstrapRouterGetters","call":"use BootstrapRouterGetters<\\br><\\br>"}},"public_properties":{"$phpstorm_bugfix":{"name":"$phpstorm_bugfix"},"$view":{"name":"$view"},"$model":{"name":"$model"},"$menuid":{"name":"$menuid","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$new_menuid":{"name":"$new_menuid","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$actionid":{"name":"$actionid","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$action_id":{"name":"$action_id","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$view_name":{"name":"$view_name","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$controller":{"name":"$controller","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}}},"private_properties":{"$action_name":{"name":"$action_name","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$controller_name":{"name":"$controller_name","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$error":{"name":"$error","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$view_data":{"name":"$view_data","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$controller_path":{"name":"$controller_path","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$component_path":{"name":"$component_path","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$action_shortname":{"name":"$action_shortname","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}}}},{"file_name":"Router\/BootstrapRouterGetters.php","doc_comment":false,"doc_namespace":"Bootstrap\\Router<\\br><\\br>","trait":"BootstrapRouterGetters","methods":{"getViewName":{"variables":[],"name":"getViewName","call":"public function getViewName()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getActionName":{"variables":[],"name":"getActionName","call":"public function getActionName()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getMenuId":{"variables":[],"name":"getMenuId","call":"public function getMenuId()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getControllerName":{"variables":[],"name":"getControllerName","call":"public function getControllerName()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getError":{"variables":[],"name":"getError","call":"public function getError()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"getViewData":{"variables":[],"name":"getViewData","call":"public function getViewData()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"setActionShortname":{"variables":["$name"],"name":"setActionShortname","call":"public function setActionShortname($name)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Router\/BootstrapRouterInterface.php","doc_comment":false,"doc_namespace":"Bootstrap\\Router<\\br><\\br>","methods":[],"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Views\/BootstrapView.php","doc_comment":{"summary":"Class BootstrapView"},"doc_namespace":"Bootstrap\\Views<\\br><\\br>","class":"BootstrapView extends BootstrapComponent implements BootstrapViewInterface","methods":{"__construct":{"variables":["$obj"],"name":"__construct","call":"public function __construct($obj)","comment":{"summary":"BootstrapView constructor.","parameters":[],"links":[],"object":"","example":""}},"getBottomMenu":{"variables":[],"name":"getBottomMenu","call":"public function getBottomMenu()","comment":{"summary":"Returns bottom menu. Bottom menu is defined in the web admin.","parameters":[],"links":[],"object":"","example":""}},"tab1":{"variables":[],"name":"tab1","call":"public function tab1()","comment":{"summary":"All views must define at least tab1() to return any data. Explanation of different sections: Header -- non-scrolling element on top of the view Scroll -- main layout section which scrolls Footer -- non-scrolling element at the bottom of the view Onload -- any actions to be performed when view is activated. This should be fed only with OnClick items Control -- similar to onload, but the command is executed only once after refresh action Divs -- Any divs that are part of the view. Note that divs can be also be defined outside of the tab1, inside a function called divs()","parameters":[],"links":[],"object":"","example":""}},"setViewData":{"variables":["$data"],"name":"setViewData","call":"public function setViewData($data)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}}},"uses":{"BootstrapComponent":{"name":"BootstrapComponent","call":"use BootstrapComponent"},"ComponentHelpers":{"name":"ComponentHelpers","call":"use ComponentHelpers"},"Elements":{"name":"Elements","call":"use Elements<\\br><\\br>"},"ViewHelpers":{"name":"ViewHelpers","call":"use ViewHelpers"},"ViewGetters":{"name":"ViewGetters","call":"use ViewGetters<\\br><\\br>"}},"public_properties":{"$phpstorm_bugfix":{"name":"$phpstorm_bugfix"},"$model":{"name":"$model"},"$components":{"name":"$components"},"$colors":{"name":"$colors","comment":{"summary":"Includes an array of colors defined for the app \/ branch \/ action <code>array ( [text_color] => #FF000000 [icon_color] => #FF000000 [background_color] => #FFCFD8DC [button_text] => #FF000000 [dark_button_text] => #FFFFFFFF [top_bar_text_color] => #FFFFFFFF [top_bar_icon_color] => #FFFFFFFF [button_more_info_color] => #FF000000 [button_more_info_icon] => #FFFFFFFF [button_more_info_icon_color] => #FFFFFFFF [button_more_info_text_color] => #FFFFFFFF [item_text_color] => #FFFFFFFF [top_bar_color] => #FFD32F2F [button_color] => #FF536DFE [item_color] => #FFFFCDD2 [button_icon_color] => #FFFFFFFF [button_text_color] => #FFFFFFFF [side_menu_color] => #FFFFFFFF [side_menu_text_color] => #FF000000 )<\/code>","parameters":[],"links":[],"object":"","example":""}},"$menuid":{"name":"$menuid","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$actionid":{"name":"$actionid","comment":{"summary":"Id for the current action as is known only for this particular user.","parameters":[],"links":[],"object":"var","example":""}},"$data":{"name":"$data","comment":{"summary":"","parameters":[],"links":[],"object":"stdClass","example":""}},"$layout":{"name":"$layout","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_text_color":{"name":"$color_text_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_icon_color":{"name":"$color_icon_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_background_color":{"name":"$color_background_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_text":{"name":"$color_button_text","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_dark_button_text":{"name":"$color_dark_button_text","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_top_bar_text_color":{"name":"$color_top_bar_text_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_top_bar_icon_color":{"name":"$color_top_bar_icon_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_more_info_color":{"name":"$color_button_more_info_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_more_info_icon_color":{"name":"$color_button_more_info_icon_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_more_info_text_color":{"name":"$color_button_more_info_text_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_item_text_color":{"name":"$color_item_text_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_top_bar_color":{"name":"$color_top_bar_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_color":{"name":"$color_button_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_item_color":{"name":"$color_item_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_icon_color":{"name":"$color_button_icon_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_button_text_color":{"name":"$color_button_text_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_side_menu_color":{"name":"$color_side_menu_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_side_menu_text_color":{"name":"$color_side_menu_text_color","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$color_topbar_hilite":{"name":"$color_topbar_hilite","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$bottom_menu_id":{"name":"$bottom_menu_id","comment":{"summary":"","parameters":[],"links":[],"object":"var","example":""}},"$bottom_menu_json":{"name":"$bottom_menu_json","comment":{"summary":"Bottom menu json code is saved here. Normally you shouldn't need to access this directly.","parameters":[],"links":[],"object":"bool","example":""}}},"private_properties":[]},{"file_name":"Views\/BootstrapViewInterface.php","doc_comment":false,"doc_namespace":"Bootstrap\\Views<\\br><\\br>","methods":[],"uses":[],"public_properties":[],"private_properties":[]},{"file_name":"Views\/ViewGetters.php","doc_comment":false,"doc_namespace":"Bootstrap\\Views<\\br><\\br>","trait":"ViewGetters","methods":{"is_numeric":{"variables":[],"name":"is_numeric","call":"use function is_numeric()"},"getData":{"variables":["$field","$type","$required"],"name":"getData","call":"public function getData($field,$type,$required)","comment":{"summary":"Data passed from the controller is availble to views and components through this function. Notice that data passed from controller should be typed. This will ease debugging and reduce type related errors. Types are: array, bool, int, num, string, float, object or mixed.","parameters":{"$required":{"summary":"param bool $required  if this is set to true, an empty value will display an erorr on the client"}},"links":[],"object":"","example":""}}},"uses":{"is_numeric":{"name":"is_numeric","call":"use is_numeric<\\br><\\br>"}},"public_properties":[],"private_properties":[]},{"file_name":"Views\/ViewHelpers.php","doc_comment":false,"doc_namespace":"Bootstrap\\Views<\\br><\\br>","trait":"ViewHelpers","methods":{"actionViewerror":{"variables":[],"name":"actionViewerror","call":"public function actionViewerror()","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}},"setError":{"variables":["$msg"],"name":"setError","call":"public function setError($msg)","comment":{"summary":"","parameters":[],"links":[],"object":"","example":""}}},"uses":[],"public_properties":[],"private_properties":[]}]}