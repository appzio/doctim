{
  "hierarchy": {
    "Components": {
      "0": "BootstrapComponent.php",
      "1": "BootstrapComponentInterface.php",
      "2": "ComponentHelpers.php",
      "Elements": [
        "Banner.php",
        "Bottommenu.php",
        "Calendar.php",
        "Column.php",
        "ConfirmationDialog.php",
        "Div.php",
        "Divider.php",
        "Fieldlist.php",
        "FormFieldBirthday.php",
        "FormFieldList.php",
        "FormFieldOnoff.php",
        "FormFieldPassword.php",
        "FormFieldText.php",
        "FormFieldTextArea.php",
        "FormFieldUploadImage.php",
        "FormFieldUploadVideo.php",
        "FullpageLoader.php",
        "Html.php",
        "Image.php",
        "InfiniteScroll.php",
        "Loader.php",
        "Map.php",
        "Onclick.php",
        "Progress.php",
        "RangeSlider.php",
        "Row.php",
        "Spacers.php",
        "Swipe.php",
        "SwipeAreaNavigation.php",
        "SwipeNavi.php",
        "Text.php",
        "Video.php"
      ],
      "images": [
        
      ],
      "snippets": [
        "ArticleBookmarking.php",
        "ArticleBottommenu.php",
        "ArticleBottomnotifications.php",
        "ArticleChat.php",
        "ArticleComponent.php",
        "ArticleConfirmationdialog.php",
        "ArticleContactsection.php",
        "ArticleGallery.php",
        "ArticleGmapsSearch.php",
        "ArticleGroupchatlist.php",
        "ArticleMenuComponents.php",
        "ArticlePlacesSearch.php",
        "ArticleRentaltenantproperties.php",
        "ArticleSelectorlist.php",
        "ArticleShoppinglist.php",
        "ArticleSuggestedTerms.php",
        "ArticleUserinfo.php",
        "ArticleUserpreferences.php",
        "InstagramConnector.php"
      ],
      "styles": [
        
      ]
    },
    "Controllers": [
      "BootstrapController.php",
      "BootstrapControllerInterface.php",
      "BootstrapPreprocessor.php"
    ],
    "Example": {
      "actionMexample": {
        "Components": [
          "Components.php",
          "getDivPhoneNumbers.php",
          "getIconField.php",
          "getPhoneNumberField.php",
          "getPhotoField.php",
          "getShadowBox.php"
        ],
        "Controllers": [
          "Controller.php"
        ],
        "Models": [
          "Model.php"
        ],
        "Views": [
          "Pagetwo.php",
          "View.php"
        ],
        "forms": [
          "Mexample.php"
        ],
        "sql": [
          "Variables.php"
        ],
        "themes": {
          "example": {
            "Components": [
              "Components.php",
              "Hello.php"
            ],
            "Controllers": [
              "Controller.php"
            ],
            "Models": [
              "Model.php"
            ],
            "Views": [
              "Pagetwo.php",
              "View.php"
            ],
            "images": [
              
            ],
            "styles": [
              
            ]
          }
        }
      }
    },
    "Models": [
      "BootstrapModel.php",
      "DataHelpers.php",
      "Mobilematching.php",
      "Session.php",
      "Validators.php",
      "Variables.php"
    ],
    "Router": [
      "BootstrapRouter.php",
      "BootstrapRouterGetters.php",
      "BootstrapRouterInterface.php"
    ],
    "Views": [
      "BootstrapView.php",
      "BootstrapViewInterface.php",
      "ViewGetters.php",
      "ViewHelpers.php"
    ],
    "packages": {
      "actionMobileexample": {
        "controllers": [
          "MobileexampleController.php"
        ],
        "forms": [
          "Mobileexample.php"
        ],
        "models": [
          "MobileexampleAccessor.php",
          "MobileexampleModel.php"
        ],
        "sql": [
          "Variables.php"
        ],
        "themes": {
          "default": {
            "controllers": [
              "MobileexampleDefaultController.php"
            ],
            "images": [
              
            ],
            "styles": [
              
            ],
            "views": [
              "MobileexampleDefaultView.php"
            ]
          }
        },
        "views": [
          "MobileexampleView.php"
        ]
      }
    }
  },
  "docs": [
    {
      "file_name": "Components\/BootstrapComponent.php",
      "doc_comment": "namespace Bootstrap\\Components\n",
      "class": "class BootstrapComponent implements Bootstrap\\BootstrapComponentInterface",
      "methods": {
        "__construct": {
          "variables": [
            "$obj",
            "$some"
          ],
          "name": "__construct",
          "call": "public function __construct($obj,$some)"
        },
        "getErrors": {
          "variables": [
            "$content",
            "$parameters"
          ],
          "name": "getErrors",
          "call": "public function getErrors($content,$parameters)",
          "comment": {
            "summary": "Returns an image for the view. Feed it with a filename (can be from variable or images directory). Note that the filename which gets exposed to client is not the same that the one in the actions images directory.\n\nselected_state, variable, onclick, style, image_fallback (when clicked, change to this image), selected_state, lazy (loads after view), tap_to_open, tap_image (image file name)",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'variable' => 'variable_name',\n      'variable'   => 'variablename',\n      'lazy' => '1' \/\/ allows to show the view before the image is downloaded\n      'tap_to_open' => \/\/ will open a full screen version of the image on a tap\n      'tap_image' => 'filename.png' \/\/ opens an alternate version upon clicking the image (full screen)\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "addDivs": {
          "variables": [
            "$divs"
          ],
          "name": "addDivs",
          "call": "public function addDivs($divs)"
        },
        "getDivs": {
          "variables": [
            "$test"
          ],
          "name": "getDivs",
          "call": "public function getDivs($test)",
          "comment": {
            "summary": "Will return divs",
            "parameters": {
              "$test": "this is just for testing and stuff there"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapComponentInterface": {
          "name": "BootstrapComponentInterface",
          "call": "use Bootstrap\\Components\\BootstrapComponentInterface\n"
        },
        "Elements": {
          "name": "Elements",
          "call": "use Bootstrap\\Components\\Elements as Elements\n"
        },
        "BootstrapModel": {
          "name": "BootstrapModel",
          "call": "use Bootstrap\\Models\\BootstrapModel\n"
        },
        "ViewGetters": {
          "name": "ViewGetters",
          "call": "use ViewGetters\n    "
        },
        "ViewHelpers": {
          "name": "ViewHelpers",
          "call": "use ViewHelpers\n\n\n    "
        },
        "ComponentHelpers": {
          "name": "ComponentHelpers",
          "call": "use ComponentHelpers\n\n    "
        },
        "Banner": {
          "name": "Banner",
          "call": "use Elements\\Banner\n    "
        },
        "Column": {
          "name": "Column",
          "call": "use Elements\\Column\n    "
        },
        "FormFieldPassword": {
          "name": "FormFieldPassword",
          "call": "use Elements\\FormFieldPassword\n    "
        },
        "FormFieldText": {
          "name": "FormFieldText",
          "call": "use Elements\\FormFieldText\n    "
        },
        "FormFieldTextArea": {
          "name": "FormFieldTextArea",
          "call": "use Elements\\FormFieldTextArea\n    "
        },
        "FormFieldUploadImage": {
          "name": "FormFieldUploadImage",
          "call": "use Elements\\FormFieldUploadImage\n    "
        },
        "FormFieldUploadVideo": {
          "name": "FormFieldUploadVideo",
          "call": "use Elements\\FormFieldUploadVideo\n\n    "
        },
        "Html": {
          "name": "Html",
          "call": "use Elements\\Html\n    "
        },
        "Image": {
          "name": "Image",
          "call": "use Elements\\Image\n    "
        },
        "InfiniteScroll": {
          "name": "InfiniteScroll",
          "call": "use Elements\\InfiniteScroll\n    "
        },
        "Loader": {
          "name": "Loader",
          "call": "use Elements\\Loader\n    "
        },
        "Onclick": {
          "name": "Onclick",
          "call": "use Elements\\Onclick\n\n    "
        },
        "Progress": {
          "name": "Progress",
          "call": "use Elements\\Progress\n    "
        },
        "RangeSlider": {
          "name": "RangeSlider",
          "call": "use Elements\\RangeSlider\n    "
        },
        "Row": {
          "name": "Row",
          "call": "use Elements\\Row\n    "
        },
        "Text": {
          "name": "Text",
          "call": "use Elements\\Text\n    "
        },
        "Video": {
          "name": "Video",
          "call": "use Elements\\Video\n    "
        },
        "Fieldlist": {
          "name": "Fieldlist",
          "call": "use Elements\\Fieldlist\n\n    "
        },
        "FullpageLoader": {
          "name": "FullpageLoader",
          "call": "use Elements\\FullpageLoader\n    "
        },
        "Spacers": {
          "name": "Spacers",
          "call": "use Elements\\Spacers\n\n    "
        },
        "Map": {
          "name": "Map",
          "call": "use Elements\\Map\n    "
        },
        "Calendar": {
          "name": "Calendar",
          "call": "use Elements\\Calendar\n\n    "
        },
        "Divider": {
          "name": "Divider",
          "call": "use Elements\\Divider\n    "
        },
        "Swipe": {
          "name": "Swipe",
          "call": "use Elements\\Swipe\n    "
        },
        "SwipeNavi": {
          "name": "SwipeNavi",
          "call": "use Elements\\SwipeNavi\n\n    "
        },
        "FormFieldList": {
          "name": "FormFieldList",
          "call": "use Elements\\FormFieldList\n    "
        },
        "FormFieldBirthday": {
          "name": "FormFieldBirthday",
          "call": "use Elements\\FormFieldBirthday\n    "
        },
        "Bottommenu": {
          "name": "Bottommenu",
          "call": "use Elements\\Bottommenu\n    "
        },
        "FormFieldOnoff": {
          "name": "FormFieldOnoff",
          "call": "use Elements\\FormFieldOnoff\n    "
        },
        "Div": {
          "name": "Div",
          "call": "use Elements\\Div\n    "
        },
        "ConfirmationDialog": {
          "name": "ConfirmationDialog",
          "call": "use Elements\\ConfirmationDialog\n    "
        },
        "SwipeAreaNavigation": {
          "name": "SwipeAreaNavigation",
          "call": "use Elements\\SwipeAreaNavigation\n\n    "
        }
      },
      "public_properties": {
        "$phpstorm_bugfix": {
          "name": "$phpstorm_bugfix",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": "\\Bootstrap\\Components\\Elements\\Divider",
            "examples": [
              
            ]
          }
        },
        "$model": {
          "name": "$model",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": "\\Bootstrap\\Models\\BootstrapModel",
            "examples": [
              
            ]
          }
        },
        "$errors": {
          "name": "$errors"
        },
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$configobj": {
          "name": "$configobj"
        },
        "$branchobj": {
          "name": "$branchobj"
        },
        "$router": {
          "name": "$router",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": "\\Bootstrap\\Router\\BootstrapRouter",
            "examples": [
              
            ]
          }
        },
        "$current_route": {
          "name": "$current_route"
        },
        "$aspect_ratio": {
          "name": "$aspect_ratio",
          "comment": {
            "summary": "you can feed divs to be automatically included here",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "$screen_width": {
          "name": "$screen_width"
        },
        "$screen_height": {
          "name": "$screen_height"
        },
        "$colors": {
          "name": "$colors"
        },
        "$data": {
          "name": "$data",
          "comment": {
            "summary": "this is the data passed from the controller",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "$color_text_color": {
          "name": "$color_text_color"
        },
        "$color_icon_color": {
          "name": "$color_icon_color"
        },
        "$color_background_color": {
          "name": "$color_background_color"
        },
        "$color_button_text": {
          "name": "$color_button_text"
        },
        "$color_dark_button_text": {
          "name": "$color_dark_button_text"
        },
        "$color_top_bar_text_color": {
          "name": "$color_top_bar_text_color"
        },
        "$color_top_bar_icon_color": {
          "name": "$color_top_bar_icon_color"
        },
        "$color_button_more_info_color": {
          "name": "$color_button_more_info_color"
        },
        "$color_button_more_info_icon_color": {
          "name": "$color_button_more_info_icon_color"
        },
        "$color_button_more_info_text_color": {
          "name": "$color_button_more_info_text_color"
        },
        "$color_item_text_color": {
          "name": "$color_item_text_color"
        },
        "$color_top_bar_color": {
          "name": "$color_top_bar_color"
        },
        "$color_button_color": {
          "name": "$color_button_color"
        },
        "$color_item_color": {
          "name": "$color_item_color"
        },
        "$color_button_icon_color": {
          "name": "$color_button_icon_color"
        },
        "$color_button_text_color": {
          "name": "$color_button_text_color"
        },
        "$color_side_menu_color": {
          "name": "$color_side_menu_color"
        },
        "$color_side_menu_text_color": {
          "name": "$color_side_menu_text_color"
        },
        "$color_topbar_hilite": {
          "name": "$color_topbar_hilite"
        }
      },
      "private_properties": {
        "$divs": {
          "name": "$divs",
          "type": "array",
          "comment": {
            "summary": "you can feed divs to be automatically included here",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      }
    },
    {
      "file_name": "Components\/BootstrapComponentInterface.php",
      "doc_comment": "namespace Bootstrap\\Components\n\n",
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/ComponentHelpers.php",
      "doc_comment": "namespace Bootstrap\\Components\n\n",
      "class": false,
      "methods": {
        "array_search": {
          "variables": [
            
          ],
          "name": "array_search",
          "call": "use function array_search()"
        },
        "is_numeric": {
          "variables": [
            
          ],
          "name": "is_numeric",
          "call": "use function is_numeric()"
        },
        "is_string": {
          "variables": [
            
          ],
          "name": "is_string",
          "call": "use function is_string()"
        },
        "attachStyles": {
          "variables": [
            "$obj",
            "$styles"
          ],
          "name": "attachStyles",
          "call": "public function attachStyles($obj,$styles)"
        },
        "attachParameters": {
          "variables": [
            "$obj",
            "$parameters",
            "$allowed",
            "$required"
          ],
          "name": "attachParameters",
          "call": "public function attachParameters($obj,$parameters,$allowed,$required)"
        },
        "configureDefaults": {
          "variables": [
            "$obj"
          ],
          "name": "configureDefaults",
          "call": "public function configureDefaults($obj)"
        },
        "addParam": {
          "variables": [
            "$name",
            "$params",
            "$default"
          ],
          "name": "addParam",
          "call": "public function addParam($name,$params,$default)"
        },
        "getImageFileName": {
          "variables": [
            "$image",
            "$params"
          ],
          "name": "getImageFileName",
          "call": "public function getImageFileName($image,$params)",
          "comment": {
            "summary": "",
            "parameters": {
              "$params": "param array $params isvar, width, height, crop, defaultimage, debug"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "array_search": {
          "name": "array_search",
          "call": "use function array_search\n"
        },
        "is_numeric": {
          "name": "is_numeric",
          "call": "use function is_numeric\n"
        },
        "is_string": {
          "name": "is_string",
          "call": "use function is_string\n\n"
        }
      },
      "public_properties": {
        "$model": {
          "name": "$model",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": "\\Bootstrap\\Models\\BootstrapModel $this->model",
            "examples": [
              
            ]
          }
        },
        "$actionid": {
          "name": "$actionid"
        },
        "$action_id": {
          "name": "$action_id"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Banner.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getBannerAd": {
          "variables": [
            "$advertisingid",
            "$size"
          ],
          "name": "getBannerAd",
          "call": "public function getBannerAd($advertisingid,$size)",
          "comment": {
            "summary": "",
            "parameters": {
              "$advertisingid": "-- should be the adid from Google or AdColony",
              "$size": "param string $size -- banner | rectangle"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Bottommenu.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentBottommenu": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentBottommenu",
          "call": "public function getComponentBottommenu($parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getItem": {
          "variables": [
            "$item",
            "$count",
            "$current",
            "$hilite"
          ],
          "name": "getItem",
          "call": "private function getItem($item,$count,$current,$hilite)"
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "Helper": {
          "name": "Helper",
          "call": "use Helper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Calendar.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentCalendar": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentCalendar",
          "call": "public function getComponentCalendar($parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'date' => '337651200', \/\/ unix time\n      'variable'   => 'variablename',\n      'selection_style' => $onclick, \/\/ this must be an object\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Column.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentColumn": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentColumn",
          "call": "public function getComponentColumn($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "array of other objects",
              "$parameters": "<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/ConfirmationDialog.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentConfirmationDialog": {
          "variables": [
            "$onclick_yes",
            "$div",
            "$text"
          ],
          "name": "getComponentConfirmationDialog",
          "call": "public function getComponentConfirmationDialog($onclick_yes,$div,$text)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Div.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "getComponentDiv": {
          "variables": [
            "$id",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentDiv",
          "call": "public function getComponentDiv($id,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Divider.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "getComponentDivider": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentDivider",
          "call": "public function getComponentDivider($parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Fieldlist.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldList": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldList",
          "call": "public function getComponentFormFieldList($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "array of other objects",
              "$parameters": "<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldBirthday.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldBirthday": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldBirthday",
          "call": "public function getComponentFormFieldBirthday($parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldList.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "is_array": {
          "variables": [
            
          ],
          "name": "is_array",
          "call": "use function is_array()"
        },
        "getComponentFormFieldSelectorList": {
          "variables": [
            "$list",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldSelectorList",
          "call": "public function getComponentFormFieldSelectorList($list,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "is_array": {
          "name": "is_array",
          "call": "use function is_array\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldOnoff.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "is_array": {
          "variables": [
            
          ],
          "name": "is_array",
          "call": "use function is_array()"
        },
        "getComponentFormFieldOnoff": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldOnoff",
          "call": "public function getComponentFormFieldOnoff($parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "is_array": {
          "name": "is_array",
          "call": "use function is_array\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldPassword.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldPassword": {
          "variables": [
            "$field_content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldPassword",
          "call": "public function getComponentFormFieldPassword($field_content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldText.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldText": {
          "variables": [
            "$field_content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldText",
          "call": "public function getComponentFormFieldText($field_content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => 'initially' \/\/initially or keep-open,\n      'empty' => '1'       \/\/ whether the field should be empty and not use submitted value\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldTextArea.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldTextArea": {
          "variables": [
            "$field_content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldTextArea",
          "call": "public function getComponentFormFieldTextArea($field_content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldUploadImage.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldUploadImage": {
          "variables": [
            "$field_content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldUploadImage",
          "call": "public function getComponentFormFieldUploadImage($field_content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$field_content": "string, should be an image file name",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FormFieldUploadVideo.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFormFieldUploadVideo": {
          "variables": [
            "$field_content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFormFieldUploadVideo",
          "call": "public function getComponentFormFieldUploadVideo($field_content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$field_content": "string, should be an video file name or stream url",
              "$parameters": "<code>\n      $array = array(\n      'hint' => 'hint text',\n      'height' => '40',\n      'submit_menu_id' => 'someid',\n      'maxlength', => '80',\n      'input_type' => 'text',\n      'activation' => '' ??\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/FullpageLoader.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentFullPageLoader": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentFullPageLoader",
          "call": "public function getComponentFullPageLoader($parameters,$styles)",
          "comment": {
            "summary": "Shows a simple loader element (spinning wheel)",
            "parameters": {
              "$parameters": "<code>\n      $array = array(\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Html.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentHtml": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentHtml",
          "call": "public function getComponentHtml($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, HTML formatted text. Note that this does not support all HTML notation",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Image.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentImage": {
          "variables": [
            "$filename",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentImage",
          "call": "public function getComponentImage($filename,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, filename or url",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "lazy (loads after view), tap_to_open, tap_image (image file name)"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/InfiniteScroll.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentInfiniteScroll": {
          "variables": [
            "$content",
            "$nextpageid"
          ],
          "name": "getComponentInfiniteScroll",
          "call": "public function getComponentInfiniteScroll($content,$nextpageid)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "array of objects, similar to row or column",
              "$nextpageid": "string, this is the id that client will send to server when user reaches the end of the scroll"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Loader.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentLoader": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentLoader",
          "call": "public function getComponentLoader($parameters,$styles)",
          "comment": {
            "summary": "Shows a simple loader element (spinning wheel)",
            "parameters": {
              "$parameters": "<code>\n      $array = array(\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Map.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentMap": {
          "variables": [
            "$variable",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentMap",
          "call": "public function getComponentMap($variable,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Onclick.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "explode": {
          "variables": [
            
          ],
          "name": "explode",
          "call": "use function explode()"
        },
        "stristr": {
          "variables": [
            
          ],
          "name": "stristr",
          "call": "use function stristr()"
        },
        "getOnclickTab": {
          "variables": [
            "$number",
            "$parameters",
            "$saveids"
          ],
          "name": "getOnclickTab",
          "call": "public function getOnclickTab($number,$parameters,$saveids)",
          "comment": {
            "summary": "",
            "parameters": {
              "$parameters": "<code>\n      $array = array(\n      'sync_open' => '1',\n      'sync_close'   => '1',\n      'context' => 'someid', \/\/ anything with context will get pre-cached by the client\n      'back_button' => '1',\n      'id' => 'someid',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getOnclickShowDiv": {
          "variables": [
            "$divid",
            "$parameters",
            "$layout",
            "$saveids"
          ],
          "name": "getOnclickShowDiv",
          "call": "public function getOnclickShowDiv($divid,$parameters,$layout,$saveids)"
        },
        "getOnclickHideDiv": {
          "variables": [
            "$divid",
            "$parameters",
            "$saveids"
          ],
          "name": "getOnclickHideDiv",
          "call": "public function getOnclickHideDiv($divid,$parameters,$saveids)"
        },
        "getOnclickHideElement": {
          "variables": [
            "$element_id",
            "$parameters",
            "$saveids"
          ],
          "name": "getOnclickHideElement",
          "call": "public function getOnclickHideElement($element_id,$parameters,$saveids)"
        },
        "getOnclickShowElement": {
          "variables": [
            "$element_id",
            "$parameters",
            "$saveids"
          ],
          "name": "getOnclickShowElement",
          "call": "public function getOnclickShowElement($element_id,$parameters,$saveids)"
        },
        "getOnclickSubmit": {
          "variables": [
            "$menuid",
            "$clickparameters"
          ],
          "name": "getOnclickSubmit",
          "call": "public function getOnclickSubmit($menuid,$clickparameters)"
        },
        "getOnclickCompleteAction": {
          "variables": [
            
          ],
          "name": "getOnclickCompleteAction",
          "call": "public function getOnclickCompleteAction()"
        },
        "getOnclickRoute": {
          "variables": [
            "$route",
            "$persist_route",
            "$saveparameters",
            "$async",
            "$clickparameters"
          ],
          "name": "getOnclickRoute",
          "call": "public function getOnclickRoute($route,$persist_route,$saveparameters,$async,$clickparameters)"
        },
        "getOnclickOpenAction": {
          "variables": [
            "$permaname",
            "$actionid",
            "$parameters",
            "$route",
            "$persist_route",
            "$saveparams"
          ],
          "name": "getOnclickOpenAction",
          "call": "public function getOnclickOpenAction($permaname,$actionid,$parameters,$route,$persist_route,$saveparams)"
        },
        "getOnclickOpenBranch": {
          "variables": [
            "$branchid",
            "$parameters",
            "$route",
            "$persist_route",
            "$saveparams"
          ],
          "name": "getOnclickOpenBranch",
          "call": "public function getOnclickOpenBranch($branchid,$parameters,$route,$persist_route,$saveparams)"
        },
        "encryptParams": {
          "variables": [
            "$persist_route",
            "$route",
            "$saveparameters",
            "$actionid"
          ],
          "name": "encryptParams",
          "call": "private function encryptParams($persist_route,$route,$saveparameters,$actionid)"
        },
        "getOnclickImageUpload": {
          "variables": [
            "$variablename",
            "$parameters"
          ],
          "name": "getOnclickImageUpload",
          "call": "public function getOnclickImageUpload($variablename,$parameters)"
        },
        "getOnclickPushPermissions": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickPushPermissions",
          "call": "public function getOnclickPushPermissions($parameters)"
        },
        "getOnclickGoogleLogin": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickGoogleLogin",
          "call": "public function getOnclickGoogleLogin($parameters)"
        },
        "getOnclickGoogleLogout": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickGoogleLogout",
          "call": "public function getOnclickGoogleLogout($parameters)"
        },
        "getOnclickFacebookInvite": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickFacebookInvite",
          "call": "public function getOnclickFacebookInvite($parameters)",
          "comment": {
            "summary": "",
            "parameters": {
              "$parameters": "<code>\n      array(   'fb_title' => 'my title',\n               'fb_message' => 'my share msg'\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getOnclickFacebookAppInvite": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickFacebookAppInvite",
          "call": "public function getOnclickFacebookAppInvite($parameters)"
        },
        "getOnclickFacebookLogin": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickFacebookLogin",
          "call": "public function getOnclickFacebookLogin($parameters)"
        },
        "getOnclickFacebookLogout": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickFacebookLogout",
          "call": "public function getOnclickFacebookLogout($parameters)"
        },
        "getOnclickTwitterLogin": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickTwitterLogin",
          "call": "public function getOnclickTwitterLogin($parameters)"
        },
        "getOnclickClosePopup": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickClosePopup",
          "call": "public function getOnclickClosePopup($parameters)"
        },
        "getOnclickListBranches": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickListBranches",
          "call": "public function getOnclickListBranches($parameters)"
        },
        "getOnclickLocation": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickLocation",
          "call": "public function getOnclickLocation($parameters)",
          "comment": {
            "summary": "",
            "parameters": {
              "$parameters": "<code>\n      $array = array(\n      'sync_open' => '1',\n      'id' => 'someid',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getOnclickOpenUrl": {
          "variables": [
            "$url",
            "$parameters"
          ],
          "name": "getOnclickOpenUrl",
          "call": "public function getOnclickOpenUrl($url,$parameters)",
          "comment": {
            "summary": "",
            "parameters": {
              "$url": "\/\/ valid url (can be also tel:\/\/3391282822 for example)",
              "$parameters": "<code>\n      $array = array(\n      );"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getOnclickShowMessage": {
          "variables": [
            "$title",
            "$message",
            "$parameters"
          ],
          "name": "getOnclickShowMessage",
          "call": "public function getOnclickShowMessage($title,$message,$parameters)"
        },
        "getOnclickGoHome": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickGoHome",
          "call": "public function getOnclickGoHome($parameters)"
        },
        "getOnclickPurchase": {
          "variables": [
            "$ios_product_id",
            "$android_product_id",
            "$parameters"
          ],
          "name": "getOnclickPurchase",
          "call": "public function getOnclickPurchase($ios_product_id,$android_product_id,$parameters)"
        },
        "getOnclickPurchaseRestore": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickPurchaseRestore",
          "call": "public function getOnclickPurchaseRestore($parameters)"
        },
        "getOnclickBraintreePurchase": {
          "variables": [
            "$productid",
            "$parameters"
          ],
          "name": "getOnclickBraintreePurchase",
          "call": "public function getOnclickBraintreePurchase($productid,$parameters)"
        },
        "getOnclickOpenSidemenu": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickOpenSidemenu",
          "call": "public function getOnclickOpenSidemenu($parameters)"
        },
        "getOnclickMonitorRegion": {
          "variables": [
            "$beaconid",
            "$parameters"
          ],
          "name": "getOnclickMonitorRegion",
          "call": "public function getOnclickMonitorRegion($beaconid,$parameters)"
        },
        "getOnclickStopRegion": {
          "variables": [
            "$region_id",
            "$parameters"
          ],
          "name": "getOnclickStopRegion",
          "call": "public function getOnclickStopRegion($region_id,$parameters)"
        },
        "getOnclickStopAllRegions": {
          "variables": [
            "$parameters"
          ],
          "name": "getOnclickStopAllRegions",
          "call": "public function getOnclickStopAllRegions($parameters)"
        },
        "getOnclickFindBeacons": {
          "variables": [
            "$region_id",
            "$parameters"
          ],
          "name": "getOnclickFindBeacons",
          "call": "public function getOnclickFindBeacons($region_id,$parameters)"
        },
        "getOnclickOpenInterstitialAd": {
          "variables": [
            "$adcolony_zone",
            "$parameters"
          ],
          "name": "getOnclickOpenInterstitialAd",
          "call": "public function getOnclickOpenInterstitialAd($adcolony_zone,$parameters)"
        },
        "getOnclickSwipeStackControl": {
          "variables": [
            "$container_id",
            "$direction",
            "$parameters"
          ],
          "name": "getOnclickSwipeStackControl",
          "call": "public function getOnclickSwipeStackControl($container_id,$direction,$parameters)"
        },
        "getOnclickCheckSchme": {
          "variables": [
            "$scheme_url",
            "$parameters"
          ],
          "name": "getOnclickCheckSchme",
          "call": "public function getOnclickCheckSchme($scheme_url,$parameters)"
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "explode": {
          "name": "explode",
          "call": "use function explode\n"
        },
        "stdClass": {
          "name": "stdClass",
          "call": "use stdClass\n"
        },
        "stristr": {
          "name": "stristr",
          "call": "use function stristr\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Progress.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentProgress": {
          "variables": [
            "$fill",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentProgress",
          "call": "public function getComponentProgress($fill,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$fill": "-- this is string that indicates how far its filled (0.1 = 10%, 1 = 100%)",
              "$parameters": "<code>\n      $array = array(\n      'text_content' => 'text string',  \/\/ shown\n      'progress_image'   => 'image_file_name.png', \/\/ this is a compound of item id & action of swipe left\n      'track_image' => 'image_file_name.png', \/\/ this must be an object or an array of objects\n      'track_color' => '#FFFFFF', \/\/\n      'progress_color' => '#000000',\n      'animate' => '1' \/\/ 0\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/RangeSlider.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentRangeSlider": {
          "variables": [
            "$parameters",
            "$styles"
          ],
          "name": "getComponentRangeSlider",
          "call": "public function getComponentRangeSlider($parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$fill": "-- this is string that indicates how far its filled (0.1 = 10%, 1 = 100%)",
              "$parameters": "<code>\n      $array = array(\n      'variable' => 'variable', \/\/ !!! REQUIRED\n      'min_value' => 1, \/\/ !!! REQUIRED\n      'max_value' => 10, \/\/ !!! REQUIRED\n      'step' => 1, \/\/ !!! REQUIRED\n      'left_track_color' => '#FFFFFF',  \/\/ shown\n      'right_track_color'   => '#FFFFFF', \/\/ this is a compound of item id & action of swipe left\n      'thumb_color' => '#000000', \/\/ this must be an object or an array of objects\n      'thumb_image' => 'imagefilename.png', \/\/\n      'track_height' => '40',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": "variable -- variable name",
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Row.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentRow": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentRow",
          "call": "public function getComponentRow($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "array of other objects",
              "$parameters": "<code>\n      $array = array(\n      'rightswipeid' => 'item-id-rightswipe',  \/\/ this is a compound of item id & action of swipe right\n      'leftswipeid'   => 'item-id-leftswipe', \/\/ this is a compound of item id & action of swipe left\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'id' => 'mycustomid',\n      'swipe_id' => 'swipeareaid' \/\/ refers to swipearea in the view\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Spacers.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentSpacer": {
          "variables": [
            "$height",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentSpacer",
          "call": "public function getComponentSpacer($height,$parameters,$styles)",
          "comment": {
            "summary": "Shows a simple loader element (spinning wheel)",
            "parameters": {
              "$parameters": "<code>\n      $array = array(\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getComponentVerticalSpacer": {
          "variables": [
            "$width",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentVerticalSpacer",
          "call": "public function getComponentVerticalSpacer($width,$parameters,$styles)"
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Swipe.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "getComponentSwipe": {
          "variables": [
            "$pages",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentSwipe",
          "call": "public function getComponentSwipe($pages,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/SwipeAreaNavigation.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "getComponentSwipeAreaNavigation": {
          "variables": [
            "$active_color",
            "$inactive_color",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentSwipeAreaNavigation",
          "call": "public function getComponentSwipeAreaNavigation($active_color,$inactive_color,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/SwipeNavi.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "getComponentSwipeNavi": {
          "variables": [
            "$totalcount",
            "$currentitem",
            "$color",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentSwipeNavi",
          "call": "public function getComponentSwipeNavi($totalcount,$currentitem,$color,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Text.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "getComponentText": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentText",
          "call": "public function getComponentText($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'selected_state' => 'style-class-name',\n      'variable'   => 'variablename',\n      'uppercase' => '1' \/\/ transform to uppercase\n      'onclick' => $onclick, \/\/ this must be an object or an array of objects\n      'style' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/Elements\/Video.php",
      "doc_comment": "namespace Bootstrap\\Components\\Elements\n",
      "class": false,
      "methods": {
        "getComponentVideo": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getComponentVideo",
          "call": "public function getComponentVideo($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$parameters": "<code>\n      $array = array(\n      'repeat' => 'style-class-name',\n      'autostart'   => 'variablename',\n      'showplayer' => $onclick, \/\/ this must be an object or an array of objects\n      'loop' => 'style-class-name',\n      );\n      <\/code>",
              "$styles": "<code>\n      $array = array(\n      'margin' => '0 0 0 0',\n      'padding' => '0 0 0 0',\n      'width' => '200', \/\/ or 100%\n      'height' => '400',\n      'max_height' => '500',\n      'background-color' => '#ffffff',\n      'background-image' => 'filename.png',\n      'background-size' => 'cover', \/\/ or 'contain', 'top' (default)\n      'crop' => 'round', \/\/ or 'yes'\n      'vertical-align' => 'middle',\n      'text-align' => 'center',\n      'font-size' => '14',\n      'font-ios' => 'Roboto',\n      'font-weight' => 'Bold',\n      'font-style' => 'Italic',\n      'font-android' => 'Roboto',\n      'color' => '#000000',\n      'white-space' => 'nowrap',\n      'children_style' => 'style-class-name' \/\/ this is used only in menu, progress and field-list components\n      'floating' => '1',\n      'float' => 'right',\n      'parent_style' => 'style-class-name',\n      'shadow-color' => '#000000',\n      'shadow-offset' => '0 1',\n      'shadow-radius' => '5',\n      'border-width' => '1',\n      'border-color' => '#000000',\n      'border-radius' => '4',\n      'opacity' => '0.4',\n      );\n      <\/code>"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleBookmarking.php",
      "doc_comment": false,
      "class": "class ArticleBookmarking extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "removeBookmarks": {
          "variables": [
            
          ],
          "name": "removeBookmarks",
          "call": "public function removeBookmarks()"
        },
        "init": {
          "variables": [
            
          ],
          "name": "init",
          "call": "public function init()"
        },
        "bookmarkStatus": {
          "variables": [
            
          ],
          "name": "bookmarkStatus",
          "call": "public function bookmarkStatus()"
        },
        "deleteAllBookmarks": {
          "variables": [
            
          ],
          "name": "deleteAllBookmarks",
          "call": "public function deleteAllBookmarks()"
        },
        "bookmarkRemove": {
          "variables": [
            "$actionid"
          ],
          "name": "bookmarkRemove",
          "call": "public function bookmarkRemove($actionid)"
        },
        "bookmarkSave": {
          "variables": [
            
          ],
          "name": "bookmarkSave",
          "call": "public function bookmarkSave()"
        },
        "updateNotification": {
          "variables": [
            
          ],
          "name": "updateNotification",
          "call": "private function updateNotification()"
        },
        "flushBookmarksCache": {
          "variables": [
            
          ],
          "name": "flushBookmarksCache",
          "call": "private function flushBookmarksCache()"
        },
        "bookmarksRender": {
          "variables": [
            "$bookmarkdata",
            "$mode"
          ],
          "name": "bookmarksRender",
          "call": "public function bookmarksRender($bookmarkdata,$mode)"
        },
        "getBookmarks": {
          "variables": [
            "$bookmarkdata",
            "$style"
          ],
          "name": "getBookmarks",
          "call": "public function getBookmarks($bookmarkdata,$style)"
        },
        "savebookmarks": {
          "variables": [
            
          ],
          "name": "savebookmarks",
          "call": "private function savebookmarks()"
        },
        "updateAction": {
          "variables": [
            "$num"
          ],
          "name": "updateAction",
          "call": "private function updateAction($num)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$variables": {
          "name": "$variables"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$bookmarks": {
          "name": "$bookmarks"
        },
        "$bookmarks_array": {
          "name": "$bookmarks_array"
        },
        "$action_id": {
          "name": "$action_id"
        },
        "$actionid": {
          "name": "$actionid"
        },
        "$required_params": {
          "name": "$required_params",
          "type": "array"
        },
        "$bookmark_var_name": {
          "name": "$bookmark_var_name"
        },
        "$actionobj": {
          "name": "$actionobj"
        },
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$configobj": {
          "name": "$configobj"
        },
        "$submit": {
          "name": "$submit"
        },
        "$menus": {
          "name": "$menus"
        },
        "$updateNotifications": {
          "name": "$updateNotifications"
        },
        "$userid": {
          "name": "$userid"
        },
        "$userlist": {
          "name": "$userlist"
        },
        "$notification_action": {
          "name": "$notification_action"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleBottommenu.php",
      "doc_comment": false,
      "class": "class ArticleBottommenu extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "getItem": {
          "variables": [
            "$item",
            "$count",
            "$current"
          ],
          "name": "getItem",
          "call": "public function getItem($item,$count,$current)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleBottomnotifications.php",
      "doc_comment": false,
      "class": "class ArticleBottomnotifications extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "getItem": {
          "variables": [
            "$item",
            "$count",
            "$current"
          ],
          "name": "getItem",
          "call": "public function getItem($item,$count,$current)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleChat.php",
      "doc_comment": false,
      "class": "class ArticleChat extends ArticleComponent",
      "methods": {
        "requiredOptions": {
          "variables": [
            
          ],
          "name": "requiredOptions",
          "call": "protected function requiredOptions()"
        },
        "array_flatten": {
          "variables": [
            "$arrays"
          ],
          "name": "array_flatten",
          "call": "public function array_flatten($arrays)"
        },
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "disableChat": {
          "variables": [
            "$content"
          ],
          "name": "disableChat",
          "call": "public function disableChat($content)"
        },
        "getChatError": {
          "variables": [
            
          ],
          "name": "getChatError",
          "call": "public function getChatError()"
        },
        "getChat": {
          "variables": [
            
          ],
          "name": "getChat",
          "call": "public function getChat()"
        },
        "getMyMatchItem": {
          "variables": [
            "$id"
          ],
          "name": "getMyMatchItem",
          "call": "public function getMyMatchItem($id)"
        },
        "getGroupChatHeader": {
          "variables": [
            "$users"
          ],
          "name": "getGroupChatHeader",
          "call": "private function getGroupChatHeader($users)"
        },
        "renderChatMsgs": {
          "variables": [
            
          ],
          "name": "renderChatMsgs",
          "call": "private function renderChatMsgs()"
        },
        "userIsOwner": {
          "variables": [
            "$message"
          ],
          "name": "userIsOwner",
          "call": "private function userIsOwner($message)"
        },
        "getUserInfo": {
          "variables": [
            "$id"
          ],
          "name": "getUserInfo",
          "call": "private function getUserInfo($id)"
        },
        "saveChatMsg": {
          "variables": [
            
          ],
          "name": "saveChatMsg",
          "call": "private function saveChatMsg()"
        },
        "saveData": {
          "variables": [
            
          ],
          "name": "saveData",
          "call": "public function saveData()"
        },
        "getChatName": {
          "variables": [
            "$name",
            "$type"
          ],
          "name": "getChatName",
          "call": "public function getChatName($name,$type)"
        },
        "handlePicPermission": {
          "variables": [
            
          ],
          "name": "handlePicPermission",
          "call": "private function handlePicPermission()"
        },
        "getSubmitButton": {
          "variables": [
            
          ],
          "name": "getSubmitButton",
          "call": "private function getSubmitButton()"
        },
        "getBtn": {
          "variables": [
            "$icon",
            "$onclick",
            "$filled",
            "$small"
          ],
          "name": "getBtn",
          "call": "private function getBtn($icon,$onclick,$filled,$small)"
        },
        "getPhotoUploadButton": {
          "variables": [
            
          ],
          "name": "getPhotoUploadButton",
          "call": "private function getPhotoUploadButton()"
        },
        "getFooter": {
          "variables": [
            
          ],
          "name": "getFooter",
          "call": "private function getFooter()"
        },
        "checkIfSeen": {
          "variables": [
            "$message"
          ],
          "name": "checkIfSeen",
          "call": "public function checkIfSeen($message)"
        },
        "markMsgsAsRead": {
          "variables": [
            
          ],
          "name": "markMsgsAsRead",
          "call": "public function markMsgsAsRead()"
        },
        "stripUrls": {
          "variables": [
            "$msg"
          ],
          "name": "stripUrls",
          "call": "private function stripUrls($msg)"
        },
        "getUsername": {
          "variables": [
            
          ],
          "name": "getUsername",
          "call": "public function getUsername()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$submitvariables": {
          "name": "$submitvariables"
        },
        "$configobj": {
          "name": "$configobj"
        },
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$vars": {
          "name": "$vars"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$actionobj": {
          "name": "$actionobj"
        },
        "$msgadded": {
          "name": "$msgadded",
          "type": "false"
        },
        "$submit": {
          "name": "$submit"
        },
        "$playobj": {
          "name": "$playobj"
        },
        "$userid": {
          "name": "$userid"
        },
        "$chat_content": {
          "name": "$chat_content"
        },
        "$custom_play_id": {
          "name": "$custom_play_id"
        },
        "$otheruser": {
          "name": "$otheruser"
        },
        "$save_match": {
          "name": "$save_match"
        },
        "$notify": {
          "name": "$notify"
        },
        "$use_server_time": {
          "name": "$use_server_time"
        },
        "$pic_permission": {
          "name": "$pic_permission"
        },
        "$strip_urls": {
          "name": "$strip_urls"
        },
        "$required_params": {
          "name": "$required_params",
          "type": "array"
        },
        "$context": {
          "name": "$context"
        },
        "$context_key": {
          "name": "$context_key"
        },
        "$disable_header": {
          "name": "$disable_header",
          "type": "false"
        },
        "$other_user_play_id": {
          "name": "$other_user_play_id"
        },
        "$chatid": {
          "name": "$chatid"
        },
        "$limit_monologue": {
          "name": "$limit_monologue"
        },
        "$disable_chat": {
          "name": "$disable_chat",
          "type": "false"
        },
        "$can_invite_others": {
          "name": "$can_invite_others"
        },
        "$hide_time": {
          "name": "$hide_time"
        },
        "$name_mode": {
          "name": "$name_mode"
        },
        "$chat_id": {
          "name": "$chat_id"
        },
        "$chat_info": {
          "name": "$chat_info"
        },
        "$userlist": {
          "name": "$userlist"
        },
        "$total_messages": {
          "name": "$total_messages"
        },
        "$top_button": {
          "name": "$top_button"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleComponent.php",
      "doc_comment": false,
      "class": "class ArticleComponent",
      "methods": {
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "parseDefaultArgs": {
          "variables": [
            "$args",
            "$defaults"
          ],
          "name": "parseDefaultArgs",
          "call": "public function parseDefaultArgs($args,$defaults)",
          "comment": {
            "summary": "Merge user defined arguments into defaults array.",
            "parameters": {
              "$args": "param array $args   Value to merge with $defaults",
              "$defaults": "param array         $defaults Optional. Array that serves as the defaults. Default empty."
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "addStyles": {
          "variables": [
            "$obj",
            "$options"
          ],
          "name": "addStyles",
          "call": "public function addStyles($obj,$options)"
        },
        "styleAttributes": {
          "variables": [
            
          ],
          "name": "styleAttributes",
          "call": "public static function styleAttributes()"
        },
        "getTemplate": {
          "variables": [
            
          ],
          "name": "getTemplate",
          "call": "public function getTemplate()"
        },
        "addParam": {
          "variables": [
            "$name",
            "$params",
            "$default"
          ],
          "name": "addParam",
          "call": "public static function addParam($name,$params,$default)"
        },
        "setMyColors": {
          "variables": [
            
          ],
          "name": "setMyColors",
          "call": "public function setMyColors()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$content": {
          "name": "$content"
        },
        "$options": {
          "name": "$options"
        },
        "$factoryobj": {
          "name": "$factoryobj",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": "ArticleController",
            "examples": [
              
            ]
          }
        },
        "$playid": {
          "name": "$playid"
        },
        "$gid": {
          "name": "$gid"
        },
        "$vars": {
          "name": "$vars"
        },
        "$action_id": {
          "name": "$action_id"
        },
        "$background_color": {
          "name": "$background_color"
        },
        "$hilite_color": {
          "name": "$hilite_color"
        },
        "$text_color": {
          "name": "$text_color"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleConfirmationdialog.php",
      "doc_comment": false,
      "class": "class ArticleConfirmationdialog extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "getButton": {
          "variables": [
            "$text",
            "$menuid"
          ],
          "name": "getButton",
          "call": "public function getButton($text,$menuid)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleContactsection.php",
      "doc_comment": false,
      "class": "class ArticleContactsection extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "addTitle": {
          "variables": [
            "$title"
          ],
          "name": "addTitle",
          "call": "public function addTitle($title)"
        },
        "validateScreenName": {
          "variables": [
            
          ],
          "name": "validateScreenName",
          "call": "public function validateScreenName()"
        },
        "validateEmail": {
          "variables": [
            
          ],
          "name": "validateEmail",
          "call": "public function validateEmail()"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleGallery.php",
      "doc_comment": false,
      "class": "class ArticleGallery extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "cleanImagesArray": {
          "variables": [
            "$images",
            "$exclude"
          ],
          "name": "cleanImagesArray",
          "call": "private function cleanImagesArray($images,$exclude)"
        },
        "cacheGalleryImage": {
          "variables": [
            "$image"
          ],
          "name": "cacheGalleryImage",
          "call": "private function cacheGalleryImage($image)"
        },
        "setGalleryCache": {
          "variables": [
            "$item",
            "$images",
            "$basenumber"
          ],
          "name": "setGalleryCache",
          "call": "private function setGalleryCache($item,$images,$basenumber)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$basepath": {
          "name": "$basepath"
        },
        "$abspath": {
          "name": "$abspath"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$gallerycache": {
          "name": "$gallerycache"
        },
        "$gid": {
          "name": "$gid"
        },
        "$action_id": {
          "name": "$action_id"
        },
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$debug": {
          "name": "$debug"
        },
        "$open_action": {
          "name": "$open_action"
        },
        "$open_in_popup": {
          "name": "$open_in_popup"
        },
        "$grid_spacing": {
          "name": "$grid_spacing"
        },
        "$required_params": {
          "name": "$required_params",
          "type": "array"
        },
        "$defaults": {
          "name": "$defaults",
          "type": "array"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleGmapsSearch.php",
      "doc_comment": false,
      "class": "class ArticleGmapsSearch",
      "methods": {
        "__construct": {
          "variables": [
            "$key"
          ],
          "name": "__construct",
          "call": "function __construct($key)",
          "comment": {
            "summary": "Construct",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getInfoLocation": {
          "variables": [
            
          ],
          "name": "getInfoLocation",
          "call": "public function getInfoLocation()"
        },
        "connect": {
          "variables": [
            
          ],
          "name": "connect",
          "call": "private function connect()",
          "comment": {
            "summary": "connect to Google Maps",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getData": {
          "variables": [
            
          ],
          "name": "getData",
          "call": "public function getData()",
          "comment": {
            "summary": "Get the RAW request data",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getCoords": {
          "variables": [
            
          ],
          "name": "getCoords",
          "call": "public function getCoords()"
        },
        "getAddress": {
          "variables": [
            
          ],
          "name": "getAddress",
          "call": "public function getAddress()"
        },
        "getAddressComponent": {
          "variables": [
            "$component"
          ],
          "name": "getAddressComponent",
          "call": "public function getAddressComponent($component)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$error": {
          "name": "$error"
        },
        "$search_param": {
          "name": "$search_param"
        },
        "$search_type": {
          "name": "$search_type",
          "type": "'address'"
        }
      },
      "private_properties": {
        "$data": {
          "name": "$data"
        },
        "$key": {
          "name": "$key"
        },
        "$baseUrl": {
          "name": "$baseUrl"
        }
      }
    },
    {
      "file_name": "Components\/snippets\/ArticleGroupchatlist.php",
      "doc_comment": false,
      "class": "class ArticleGroupchatlist extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "groupChats": {
          "variables": [
            "$matches"
          ],
          "name": "groupChats",
          "call": "public function groupChats($matches)"
        },
        "groupChatItem": {
          "variables": [
            "$contextkey"
          ],
          "name": "groupChatItem",
          "call": "public function groupChatItem($contextkey)"
        },
        "getFormattedNames": {
          "variables": [
            "$names"
          ],
          "name": "getFormattedNames",
          "call": "public function getFormattedNames($names)"
        },
        "getFormattedTags": {
          "variables": [
            "$chatinfo"
          ],
          "name": "getFormattedTags",
          "call": "public function getFormattedTags($chatinfo)"
        },
        "getFirstName": {
          "variables": [
            "$vars"
          ],
          "name": "getFirstName",
          "call": "public function getFirstName($vars)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$expended_connection_ids": {
          "name": "$expended_connection_ids"
        },
        "$mode": {
          "name": "$mode"
        },
        "$show_users_count": {
          "name": "$show_users_count"
        },
        "$show_chat_tags": {
          "name": "$show_chat_tags"
        },
        "$separator_styles": {
          "name": "$separator_styles"
        },
        "$return_array": {
          "name": "$return_array"
        },
        "$allow_delete": {
          "name": "$allow_delete"
        },
        "$return_data_array": {
          "name": "$return_data_array"
        },
        "$filter": {
          "name": "$filter"
        },
        "$filter_distance": {
          "name": "$filter_distance"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleMenuComponents.php",
      "doc_comment": false,
      "class": "class ArticleMenuComponents",
      "methods": {
        "getItemsWithDelete": {
          "variables": [
            "$output",
            "$items"
          ],
          "name": "getItemsWithDelete",
          "call": "public function getItemsWithDelete($output,$items)"
        },
        "componentMenuItem": {
          "variables": [
            "$config"
          ],
          "name": "componentMenuItem",
          "call": "public function componentMenuItem($config)"
        },
        "componentMenu": {
          "variables": [
            "$items",
            "$config"
          ],
          "name": "componentMenu",
          "call": "public static function componentMenu($items,$config)"
        },
        "tabMenu": {
          "variables": [
            "$items",
            "$active_tab",
            "$active_color",
            "$background_color",
            "$height",
            "$textcolor"
          ],
          "name": "tabMenu",
          "call": "public function tabMenu($items,$active_tab,$active_color,$background_color,$height,$textcolor)"
        },
        "listRow": {
          "variables": [
            "$count",
            "$column1",
            "$column2"
          ],
          "name": "listRow",
          "call": "public function listRow($count,$column1,$column2)"
        },
        "getMenuWithImage": {
          "variables": [
            "$items"
          ],
          "name": "getMenuWithImage",
          "call": "public function getMenuWithImage($items)"
        },
        "unlockRows": {
          "variables": [
            "$count",
            "$basenumber"
          ],
          "name": "unlockRows",
          "call": "public function unlockRows($count,$basenumber)"
        },
        "emptyRows": {
          "variables": [
            "$count",
            "$basenumber"
          ],
          "name": "emptyRows",
          "call": "public function emptyRows($count,$basenumber)"
        },
        "getRow": {
          "variables": [
            "$row",
            "$id",
            "$backbutton"
          ],
          "name": "getRow",
          "call": "public function getRow($row,$id,$backbutton)"
        },
        "getSingleImageMenuItem": {
          "variables": [
            "$id",
            "$style",
            "$image",
            "$action",
            "$fallbackimage",
            "$config"
          ],
          "name": "getSingleImageMenuItem",
          "call": "public function getSingleImageMenuItem($id,$style,$image,$action,$fallbackimage,$config)"
        },
        "getSingleItemMenu": {
          "variables": [
            "$item",
            "$id",
            "$style"
          ],
          "name": "getSingleItemMenu",
          "call": "public static function getSingleItemMenu($item,$id,$style)"
        },
        "getPlainMenu": {
          "variables": [
            "$items"
          ],
          "name": "getPlainMenu",
          "call": "public static function getPlainMenu($items)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$mainobj": {
          "name": "$mainobj"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticlePlacesSearch.php",
      "doc_comment": false,
      "class": "class ArticlePlacesSearch",
      "methods": {
        "__construct": {
          "variables": [
            "$key",
            "$client"
          ],
          "name": "__construct",
          "call": "public function __construct($key,$client)"
        },
        "__set": {
          "variables": [
            "$variable",
            "$value"
          ],
          "name": "__set",
          "call": "function __set($variable,$value)"
        },
        "__call": {
          "variables": [
            "$method",
            "$arguments"
          ],
          "name": "__call",
          "call": "public function __call($method,$arguments)"
        },
        "parameterBuilder": {
          "variables": [
            "$parameters"
          ],
          "name": "parameterBuilder",
          "call": "private function parameterBuilder($parameters)",
          "comment": {
            "summary": "Loops through all of our variables to make a parameter list",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "methodChecker": {
          "variables": [
            "$parameters",
            "$method"
          ],
          "name": "methodChecker",
          "call": "private function methodChecker($parameters,$method)",
          "comment": {
            "summary": "takes the parameters and method to throw exceptions or modify parameters as needed",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "queryGoogle": {
          "variables": [
            "$url",
            "$parameters"
          ],
          "name": "queryGoogle",
          "call": "private function queryGoogle($url,$parameters)",
          "comment": {
            "summary": "Submits request via curl, sets the response, then returns the response",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "meters2lng": {
          "variables": [
            "$meters",
            "$latitude"
          ],
          "name": "meters2lng",
          "call": "public function meters2lng($meters,$latitude)",
          "comment": {
            "summary": "Returns the longitude equal to a given distance (meters) at a given latitude",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "meters2lat": {
          "variables": [
            "$meters"
          ],
          "name": "meters2lat",
          "call": "public function meters2lat($meters)",
          "comment": {
            "summary": "Returns the latitude equal to a given distance (meters)",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "subdivide": {
          "variables": [
            "$url",
            "$parameters"
          ],
          "name": "subdivide",
          "call": "private function subdivide($url,$parameters)",
          "comment": {
            "summary": "Returns the aggregated responses for a subdivided search",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getResults": {
          "variables": [
            "$url"
          ],
          "name": "getResults",
          "call": "public function getResults($url)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$sleep": {
          "name": "$sleep",
          "type": "3"
        },
        "$keyword": {
          "name": "$keyword",
          "type": "null"
        },
        "$language": {
          "name": "$language",
          "type": "'en'"
        },
        "$location": {
          "name": "$location",
          "type": "null"
        },
        "$output": {
          "name": "$output",
          "type": "'json'"
        },
        "$name": {
          "name": "$name",
          "type": "null"
        },
        "$pagetoken": {
          "name": "$pagetoken",
          "type": "null"
        },
        "$radius": {
          "name": "$radius",
          "type": "null"
        },
        "$rankby": {
          "name": "$rankby",
          "type": "'prominence'"
        },
        "$sensor": {
          "name": "$sensor",
          "type": "false"
        },
        "$types": {
          "name": "$types",
          "type": "null"
        },
        "$placeid": {
          "name": "$placeid",
          "type": "null"
        },
        "$reference": {
          "name": "$reference",
          "type": "null"
        },
        "$opennow": {
          "name": "$opennow",
          "type": "null"
        },
        "$subradius": {
          "name": "$subradius",
          "type": "null"
        },
        "$getmax": {
          "name": "$getmax",
          "type": "true"
        }
      },
      "private_properties": {
        "$key": {
          "name": "$key",
          "type": "''"
        },
        "$base_url": {
          "name": "$base_url",
          "type": "'https:\/\/maps.googleapis.com\/maps\/api\/place'"
        },
        "$method": {
          "name": "$method",
          "type": "null"
        },
        "$response": {
          "name": "$response",
          "type": "null"
        },
        "$grid": {
          "name": "$grid",
          "type": "null"
        },
        "$exceptions": {
          "name": "$exceptions",
          "type": "array"
        }
      }
    },
    {
      "file_name": "Components\/snippets\/ArticleRentaltenantproperties.php",
      "doc_comment": false,
      "class": "class ArticleRentaltenantproperties extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleSelectorlist.php",
      "doc_comment": false,
      "class": "class ArticleSelectorlist extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "getField": {
          "variables": [
            
          ],
          "name": "getField",
          "call": "public function getField()"
        },
        "saveData": {
          "variables": [
            "$data"
          ],
          "name": "saveData",
          "call": "public function saveData($data)"
        },
        "getListing": {
          "variables": [
            
          ],
          "name": "getListing",
          "call": "public function getListing()"
        },
        "getItemRow": {
          "variables": [
            "$key",
            "$value"
          ],
          "name": "getItemRow",
          "call": "public function getItemRow($key,$value)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$mode": {
          "name": "$mode"
        },
        "$data": {
          "name": "$data"
        },
        "$variable": {
          "name": "$variable"
        },
        "$hint": {
          "name": "$hint"
        },
        "$title": {
          "name": "$title"
        },
        "$required_params": {
          "name": "$required_params",
          "type": "array"
        },
        "$list_data": {
          "name": "$list_data"
        },
        "$tab": {
          "name": "$tab"
        },
        "$tab_back": {
          "name": "$tab_back"
        },
        "$saved_data": {
          "name": "$saved_data"
        },
        "$dont_save_variable": {
          "name": "$dont_save_variable"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleShoppinglist.php",
      "doc_comment": false,
      "class": "class ArticleShoppinglist extends ArticleComponent",
      "methods": {
        "requiredOptions": {
          "variables": [
            
          ],
          "name": "requiredOptions",
          "call": "protected function requiredOptions()"
        },
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "handleActions": {
          "variables": [
            
          ],
          "name": "handleActions",
          "call": "public function handleActions()"
        },
        "shoppingListItemRemove": {
          "variables": [
            "$id"
          ],
          "name": "shoppingListItemRemove",
          "call": "private function shoppingListItemRemove($id)"
        },
        "getList": {
          "variables": [
            
          ],
          "name": "getList",
          "call": "public function getList()"
        },
        "listRow": {
          "variables": [
            "$count",
            "$column1",
            "$column2"
          ],
          "name": "listRow",
          "call": "public function listRow($count,$column1,$column2)"
        },
        "shoppingListHeader": {
          "variables": [
            
          ],
          "name": "shoppingListHeader",
          "call": "private function shoppingListHeader()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$submitvariables": {
          "name": "$submitvariables"
        },
        "$configobj": {
          "name": "$configobj"
        },
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$vars": {
          "name": "$vars"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$submit": {
          "name": "$submit"
        },
        "$actionobj": {
          "name": "$actionobj"
        },
        "$msgadded": {
          "name": "$msgadded",
          "type": "false"
        },
        "$title": {
          "name": "$title"
        },
        "$delete_all": {
          "name": "$delete_all"
        },
        "$share": {
          "name": "$share"
        },
        "$header": {
          "name": "$header"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleSuggestedTerms.php",
      "doc_comment": false,
      "class": "class ArticleSuggestedTerms",
      "methods": {
        "getSuggestions": {
          "variables": [
            "$key",
            "$loosematch",
            "$limit"
          ],
          "name": "getSuggestions",
          "call": "public function getSuggestions($key,$loosematch,$limit)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$suggestions": {
          "name": "$suggestions",
          "type": "array"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleUserinfo.php",
      "doc_comment": false,
      "class": "class ArticleUserinfo extends ArticleComponent",
      "methods": {
        "requiredOptions": {
          "variables": [
            
          ],
          "name": "requiredOptions",
          "call": "protected function requiredOptions()"
        },
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$submitvariables": {
          "name": "$submitvariables"
        },
        "$configobj": {
          "name": "$configobj"
        },
        "$imagesobj": {
          "name": "$imagesobj"
        },
        "$vars": {
          "name": "$vars"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$actionobj": {
          "name": "$actionobj"
        },
        "$msgadded": {
          "name": "$msgadded",
          "type": "false"
        },
        "$submit": {
          "name": "$submit"
        },
        "$playobj": {
          "name": "$playobj"
        },
        "$userid": {
          "name": "$userid"
        },
        "$chat_content": {
          "name": "$chat_content"
        },
        "$save_action_id": {
          "name": "$save_action_id"
        },
        "$userlist": {
          "name": "$userlist"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/ArticleUserpreferences.php",
      "doc_comment": false,
      "class": "class ArticleUserpreferences extends ArticleComponent",
      "methods": {
        "template": {
          "variables": [
            
          ],
          "name": "template",
          "call": "public function template()"
        },
        "getAdditionalInformationFields": {
          "variables": [
            
          ],
          "name": "getAdditionalInformationFields",
          "call": "protected function getAdditionalInformationFields()",
          "comment": {
            "summary": "Render additional information fields",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getAdditionalInformationFieldNames": {
          "variables": [
            
          ],
          "name": "getAdditionalInformationFieldNames",
          "call": "protected function getAdditionalInformationFieldNames()"
        },
        "renderAdditionalInformationField": {
          "variables": [
            "$identifier",
            "$field"
          ],
          "name": "renderAdditionalInformationField",
          "call": "protected function renderAdditionalInformationField($identifier,$field)"
        },
        "getContent": {
          "variables": [
            "$identifier"
          ],
          "name": "getContent",
          "call": "protected function getContent($identifier)"
        },
        "isJson": {
          "variables": [
            "$string"
          ],
          "name": "isJson",
          "call": "function isJson($string)"
        },
        "getStatusData": {
          "variables": [
            "$identifier"
          ],
          "name": "getStatusData",
          "call": "protected function getStatusData($identifier)",
          "comment": {
            "summary": "Get all fields for each status",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$prefix": {
          "name": "$prefix"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Components\/snippets\/InstagramConnector.php",
      "doc_comment": false,
      "class": "class InstagramApiError extends Exception",
      "methods": {
        "accessTokenUrl": {
          "variables": [
            
          ],
          "name": "accessTokenUrl",
          "call": "public function accessTokenUrl()"
        },
        "authorizeUrl": {
          "variables": [
            "$redirect_uri",
            "$scope",
            "$response_type"
          ],
          "name": "authorizeUrl",
          "call": "public function authorizeUrl($redirect_uri,$scope,$response_type)"
        },
        "__construct": {
          "variables": [
            "$client_id",
            "$client_secret",
            "$access_token"
          ],
          "name": "__construct",
          "call": "public function __construct($client_id,$client_secret,$access_token)"
        },
        "urlEncodeParams": {
          "variables": [
            "$params"
          ],
          "name": "urlEncodeParams",
          "call": "private function urlEncodeParams($params)"
        },
        "http": {
          "variables": [
            "$url",
            "$params",
            "$method"
          ],
          "name": "http",
          "call": "public function http($url,$params,$method)"
        },
        "get": {
          "variables": [
            "$endpoint",
            "$params",
            "$method"
          ],
          "name": "get",
          "call": "    public function get($endpoint,$params,$method)"
        },
        "post": {
          "variables": [
            "$endpoint",
            "$params",
            "$method"
          ],
          "name": "post",
          "call": "public function post($endpoint,$params,$method)"
        },
        "delete": {
          "variables": [
            "$endpoint",
            "$params",
            "$method"
          ],
          "name": "delete",
          "call": "public function delete($endpoint,$params,$method)"
        },
        "getAccessToken": {
          "variables": [
            "$code",
            "$redirect_uri",
            "$grant_type"
          ],
          "name": "getAccessToken",
          "call": "public function getAccessToken($code,$redirect_uri,$grant_type)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": {
        "$apiBase": {
          "name": "$apiBase",
          "type": "'https:\/\/api.instagram.com\/'"
        },
        "$apiUrl": {
          "name": "$apiUrl",
          "type": "'https:\/\/api.instagram.com\/v1\/'"
        }
      }
    },
    {
      "file_name": "Controllers\/BootstrapController.php",
      "doc_comment": "namespace Bootstrap\\Controllers\n\n",
      "class": "class BootstrapController implements BootstrapControllerInterface",
      "methods": {
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "actionDefault": {
          "variables": [
            
          ],
          "name": "actionDefault",
          "call": "public function actionDefault()"
        },
        "viewError": {
          "variables": [
            
          ],
          "name": "viewError",
          "call": "public function viewError()"
        },
        "getMenuId": {
          "variables": [
            
          ],
          "name": "getMenuId",
          "call": "public function getMenuId()"
        },
        "collectLocation": {
          "variables": [
            
          ],
          "name": "collectLocation",
          "call": "public function collectLocation()"
        }
      },
      "uses": {
        "BootstrapRouter": {
          "name": "BootstrapRouter",
          "call": "use Bootstrap\\Router\\BootstrapRouter\n"
        },
        "stdClass": {
          "name": "stdClass",
          "call": "use stdClass\n\n"
        }
      },
      "public_properties": {
        "$phpstorm_bugfix": {
          "name": "$phpstorm_bugfix"
        },
        "$view": {
          "name": "$view"
        },
        "$model": {
          "name": "$model"
        },
        "$router": {
          "name": "$router"
        },
        "$current_tab": {
          "name": "$current_tab"
        },
        "$action_name": {
          "name": "$action_name"
        },
        "$playid": {
          "name": "$playid"
        },
        "$onloads": {
          "name": "$onloads"
        },
        "$no_output": {
          "name": "$no_output",
          "type": " "
        }
      },
      "private_properties": {
        "$view_name": {
          "name": "$view_name"
        }
      }
    },
    {
      "file_name": "Controllers\/BootstrapControllerInterface.php",
      "doc_comment": "namespace Bootstrap\\Controllers\n\n",
      "class": false,
      "methods": {
        "actionDefault": {
          "variables": [
            
          ],
          "name": "actionDefault",
          "call": "public function actionDefault()"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Controllers\/BootstrapPreprocessor.php",
      "doc_comment": false,
      "class": "class BootstrapPreprocessor",
      "methods": {
        "__construct": {
          "variables": [
            
          ],
          "name": "__construct",
          "call": "public function __construct()"
        },
        "loadStyles": {
          "variables": [
            
          ],
          "name": "loadStyles",
          "call": "public function loadStyles()"
        },
        "Process": {
          "variables": [
            "$data"
          ],
          "name": "Process",
          "call": "public function Process($data)"
        },
        "saveStyles": {
          "variables": [
            "$playobj"
          ],
          "name": "saveStyles",
          "call": "public function saveStyles($playobj)"
        },
        "doProcessing": {
          "variables": [
            "$data"
          ],
          "name": "doProcessing",
          "call": "private function doProcessing($data)"
        },
        "addNewStyle": {
          "variables": [
            "$md5",
            "$stylecontent"
          ],
          "name": "addNewStyle",
          "call": "private function addNewStyle($md5,$stylecontent)"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$styles": {
          "name": "$styles"
        },
        "$gid": {
          "name": "$gid"
        },
        "$playid": {
          "name": "$playid"
        },
        "$mobileobj": {
          "name": "$mobileobj"
        },
        "$playobj": {
          "name": "$playobj"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Components\/Components.php",
      "doc_comment": "namespace packages\\actionMexample\\Components\n\n",
      "class": "class Components extends BootstrapComponent",
      "methods": [
        
      ],
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n\n"
        },
        "getPhotoField": {
          "name": "getPhotoField",
          "call": "use getPhotoField\n    "
        },
        "getShadowBox": {
          "name": "getShadowBox",
          "call": "use getShadowBox\n    "
        },
        "getIconField": {
          "name": "getIconField",
          "call": "use getIconField\n    "
        },
        "getPhoneNumberField": {
          "name": "getPhoneNumberField",
          "call": "use getPhoneNumberField\n    "
        },
        "getDivPhoneNumbers": {
          "name": "getDivPhoneNumbers",
          "call": "use getDivPhoneNumbers\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Components\/getDivPhoneNumbers.php",
      "doc_comment": "namespace packages\\actionMexample\\Components\n",
      "class": false,
      "methods": {
        "str_replace": {
          "variables": [
            
          ],
          "name": "str_replace",
          "call": "use function str_replace()"
        },
        "str_replace_array": {
          "variables": [
            
          ],
          "name": "str_replace_array",
          "call": "use function str_replace_array()"
        },
        "strtolower": {
          "variables": [
            
          ],
          "name": "strtolower",
          "call": "use function strtolower()"
        },
        "substr": {
          "variables": [
            
          ],
          "name": "substr",
          "call": "use function substr()"
        },
        "getDivPhoneNumbers": {
          "variables": [
            
          ],
          "name": "getDivPhoneNumbers",
          "call": "public function getDivPhoneNumbers()",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n"
        },
        "str_replace": {
          "name": "str_replace",
          "call": "use function str_replace\n"
        },
        "str_replace_array": {
          "name": "str_replace_array",
          "call": "use function str_replace_array\n"
        },
        "strtolower": {
          "name": "strtolower",
          "call": "use function strtolower\n"
        },
        "substr": {
          "name": "substr",
          "call": "use function substr\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Components\/getIconField.php",
      "doc_comment": "namespace packages\\actionMexample\\Components\n",
      "class": false,
      "methods": {
        "getIconField": {
          "variables": [
            "$field",
            "$title",
            "$icon"
          ],
          "name": "getIconField",
          "call": "public function getIconField($field,$title,$icon)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Components\/getPhoneNumberField.php",
      "doc_comment": "namespace packages\\actionMexample\\Components\n",
      "class": false,
      "methods": {
        "array_flip": {
          "variables": [
            
          ],
          "name": "array_flip",
          "call": "use function array_flip()"
        },
        "strtolower": {
          "variables": [
            
          ],
          "name": "strtolower",
          "call": "use function strtolower()"
        },
        "getPhoneNumberField": {
          "variables": [
            "$country",
            "$field",
            "$title",
            "$icon"
          ],
          "name": "getPhoneNumberField",
          "call": "public function getPhoneNumberField($country,$field,$title,$icon)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "array_flip": {
          "name": "array_flip",
          "call": "use function array_flip\n"
        },
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n"
        },
        "strtolower": {
          "name": "strtolower",
          "call": "use function strtolower\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Components\/getPhotoField.php",
      "doc_comment": "namespace packages\\actionMexample\\Components\n",
      "class": false,
      "methods": {
        "getPhotoField": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getPhotoField",
          "call": "public function getPhotoField($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Components\/getShadowBox.php",
      "doc_comment": "namespace packages\\actionMexample\\Components\n",
      "class": false,
      "methods": {
        "getShadowBox": {
          "variables": [
            "$content"
          ],
          "name": "getShadowBox",
          "call": "public function getShadowBox($content)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Controllers\/Controller.php",
      "doc_comment": "namespace packages\\actionMexample\\Controllers\n",
      "class": "class Controller extends BootstrapController",
      "methods": {
        "actionDefault": {
          "variables": [
            
          ],
          "name": "actionDefault",
          "call": "public function actionDefault()"
        },
        "actionPagetwo": {
          "variables": [
            
          ],
          "name": "actionPagetwo",
          "call": "public function actionPagetwo()"
        }
      },
      "uses": {
        "BootstrapController": {
          "name": "BootstrapController",
          "call": "use Bootstrap\\Controllers\\BootstrapController\n"
        },
        "ArticleView": {
          "name": "ArticleView",
          "call": "use packages\\actionMexample\\Views\\View as ArticleView\n"
        },
        "ArticleModel": {
          "name": "ArticleModel",
          "call": "use packages\\actionMexample\\Models\\Model as ArticleModel\n\n"
        }
      },
      "public_properties": {
        "$view": {
          "name": "$view"
        },
        "$model": {
          "name": "$model"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Models\/Model.php",
      "doc_comment": "namespace packages\\actionMexample\\Models\n",
      "class": "class Model extends BootstrapModel",
      "methods": {
        "is_numeric": {
          "variables": [
            
          ],
          "name": "is_numeric",
          "call": "use function is_numeric()"
        },
        "str_replace": {
          "variables": [
            
          ],
          "name": "str_replace",
          "call": "use function str_replace()"
        },
        "stristr": {
          "variables": [
            
          ],
          "name": "stristr",
          "call": "use function stristr()"
        },
        "strtolower": {
          "variables": [
            
          ],
          "name": "strtolower",
          "call": "use function strtolower()"
        },
        "ucwords": {
          "variables": [
            
          ],
          "name": "ucwords",
          "call": "use function ucwords()"
        },
        "getFieldList": {
          "variables": [
            
          ],
          "name": "getFieldList",
          "call": "public function getFieldList()"
        },
        "getCountry": {
          "variables": [
            
          ],
          "name": "getCountry",
          "call": "public function getCountry()"
        },
        "savePage1": {
          "variables": [
            
          ],
          "name": "savePage1",
          "call": "public function savePage1()"
        },
        "validatePage1": {
          "variables": [
            
          ],
          "name": "validatePage1",
          "call": "public function validatePage1()"
        },
        "closeLogin": {
          "variables": [
            "$dologin"
          ],
          "name": "closeLogin",
          "call": "public function closeLogin($dologin)"
        }
      },
      "uses": {
        "BootstrapModel": {
          "name": "BootstrapModel",
          "call": "use Bootstrap\\Models\\BootstrapModel\n"
        },
        "is_numeric": {
          "name": "is_numeric",
          "call": "use function is_numeric\n"
        },
        "str_replace": {
          "name": "str_replace",
          "call": "use function str_replace\n"
        },
        "stristr": {
          "name": "stristr",
          "call": "use function stristr\n"
        },
        "strtolower": {
          "name": "strtolower",
          "call": "use function strtolower\n"
        },
        "ucwords": {
          "name": "ucwords",
          "call": "use function ucwords\n\n"
        }
      },
      "public_properties": {
        "$validation_errors": {
          "name": "$validation_errors"
        }
      },
      "private_properties": {
        "$password": {
          "name": "$password"
        },
        "$phone": {
          "name": "$phone"
        },
        "$email": {
          "name": "$email"
        },
        "$firstname": {
          "name": "$firstname"
        },
        "$lastname": {
          "name": "$lastname"
        }
      }
    },
    {
      "file_name": "Example\/actionMexample\/Views\/Pagetwo.php",
      "doc_comment": "namespace packages\\actionMexample\\Views\n\n",
      "class": "class Pagetwo extends View",
      "methods": {
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "tab1": {
          "variables": [
            
          ],
          "name": "tab1",
          "call": "public function tab1()"
        },
        "getDivs": {
          "variables": [
            
          ],
          "name": "getDivs",
          "call": "public function getDivs()"
        },
        "addField_page2": {
          "variables": [
            "$field"
          ],
          "name": "addField_page2",
          "call": "public function addField_page2($field)"
        },
        "getDivider": {
          "variables": [
            
          ],
          "name": "getDivider",
          "call": "public function getDivider()"
        },
        "setTopShadow": {
          "variables": [
            
          ],
          "name": "setTopShadow",
          "call": "private function setTopShadow()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$components": {
          "name": "$components"
        },
        "$theme": {
          "name": "$theme"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/Views\/View.php",
      "doc_comment": "namespace packages\\actionMexample\\Views\n\n",
      "class": "class View extends BootstrapView",
      "methods": {
        "stristr": {
          "variables": [
            
          ],
          "name": "stristr",
          "call": "use function stristr()"
        },
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "tab1": {
          "variables": [
            
          ],
          "name": "tab1",
          "call": "public function tab1()"
        },
        "getDivs": {
          "variables": [
            
          ],
          "name": "getDivs",
          "call": "public function getDivs()"
        },
        "addField_page1": {
          "variables": [
            "$field"
          ],
          "name": "addField_page1",
          "call": "public function addField_page1($field)"
        },
        "getDivider": {
          "variables": [
            
          ],
          "name": "getDivider",
          "call": "public function getDivider()"
        },
        "setTopShadow": {
          "variables": [
            
          ],
          "name": "setTopShadow",
          "call": "private function setTopShadow()"
        }
      },
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use Bootstrap\\Views\\BootstrapView\n"
        },
        "Components": {
          "name": "Components",
          "call": "use packages\\actionMexample\\Controllers\\Components\n"
        },
        "stristr": {
          "name": "stristr",
          "call": "use function stristr\n\n"
        }
      },
      "public_properties": {
        "$components": {
          "name": "$components"
        },
        "$theme": {
          "name": "$theme"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/forms\/Mexample.php",
      "doc_comment": false,
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/sql\/Variables.php",
      "doc_comment": false,
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/themes\/example\/Components\/Components.php",
      "doc_comment": "namespace packages\\actionMexample\\themes\\example\\Components\n",
      "class": "class Components extends BootstrapComponents",
      "methods": [
        
      ],
      "uses": {
        "BootstrapComponents": {
          "name": "BootstrapComponents",
          "call": "use packages\\actionMexample\\Components\\Components as BootstrapComponents\n\n"
        },
        "Hello": {
          "name": "Hello",
          "call": "use Hello\n\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/themes\/example\/Components\/Hello.php",
      "doc_comment": "namespace packages\\actionMexample\\themes\\example\\Components\n",
      "class": false,
      "methods": {
        "getHelloWorld": {
          "variables": [
            "$content",
            "$parameters",
            "$styles"
          ],
          "name": "getHelloWorld",
          "call": "public function getHelloWorld($content,$parameters,$styles)",
          "comment": {
            "summary": "",
            "parameters": {
              "$content": "string, no support for line feeds",
              "$styles": "'orientation', 'height', 'width', 'align', 'crop', 'text-style', 'font-size', 'text-color', 'border-color',\n      'border-width', 'font-android', 'font-ios', 'background-color', 'background-image', 'background-size',\n      'color', 'shadow-color', 'shadow-offset', 'shadow-radius', 'vertical-align', 'border-radius', 'text-align',\n      'lazy', 'floating' (1), 'float' (right | left), 'max-height', 'white-space' (no-wrap), parent_style",
              "$parameters": "param array $parameters selected_state, variable, onclick, style"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/themes\/example\/Controllers\/Controller.php",
      "doc_comment": "namespace packages\\actionMexample\\themes\\example\\Controllers\n\n",
      "class": "class Controller extends \\packages\\actionMexample\\Controllers\\Controller",
      "methods": {
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        }
      },
      "uses": {
        "Main": {
          "name": "Main",
          "call": "use packages\\actionMexample\\themes\\example\\Views\\Main\n"
        },
        "ArticleView": {
          "name": "ArticleView",
          "call": "use packages\\actionMexample\\themes\\example\\Views\\View as ArticleView\n"
        },
        "ArticleModel": {
          "name": "ArticleModel",
          "call": "use packages\\actionMexample\\themes\\example\\Models\\Model as ArticleModel\n\n"
        }
      },
      "public_properties": {
        "$view": {
          "name": "$view"
        },
        "$model": {
          "name": "$model"
        },
        "$title": {
          "name": "$title"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/themes\/example\/Models\/Model.php",
      "doc_comment": "namespace packages\\actionMexample\\themes\\example\\Models\n",
      "class": "class Model extends BootstrapModel",
      "methods": [
        
      ],
      "uses": {
        "BootstrapModel": {
          "name": "BootstrapModel",
          "call": "use packages\\actionMexample\\Models\\Model as BootstrapModel\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/themes\/example\/Views\/Pagetwo.php",
      "doc_comment": "namespace packages\\actionMexample\\themes\\example\\Views\n",
      "class": "class Pagetwo extends BootstrapView",
      "methods": [
        
      ],
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use packages\\actionMexample\\Views\\Pagetwo as BootstrapView\n"
        },
        "Components": {
          "name": "Components",
          "call": "use packages\\actionMexample\\themes\\example\\Components\\Components\n\n"
        }
      },
      "public_properties": {
        "$layout": {
          "name": "$layout"
        },
        "$title": {
          "name": "$title"
        },
        "$components": {
          "name": "$components"
        },
        "$tab": {
          "name": "$tab"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Example\/actionMexample\/themes\/example\/Views\/View.php",
      "doc_comment": "namespace packages\\actionMexample\\themes\\example\\Views\n",
      "class": "class View extends BootstrapView",
      "methods": [
        
      ],
      "uses": {
        "BootstrapView": {
          "name": "BootstrapView",
          "call": "use packages\\actionMexample\\Views\\View as BootstrapView\n"
        },
        "Components": {
          "name": "Components",
          "call": "use packages\\actionMexample\\themes\\example\\Components\\Components\n\n"
        }
      },
      "public_properties": {
        "$layout": {
          "name": "$layout"
        },
        "$title": {
          "name": "$title"
        },
        "$components": {
          "name": "$components"
        },
        "$tab": {
          "name": "$tab"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Models\/BootstrapModel.php",
      "doc_comment": "namespace Bootstrap\\Models\n\n",
      "class": "class BootstrapModel extends CActiveRecord",
      "methods": {
        "array_flip": {
          "variables": [
            
          ],
          "name": "array_flip",
          "call": "use function array_flip()"
        },
        "is_array": {
          "variables": [
            
          ],
          "name": "is_array",
          "call": "use function is_array()"
        },
        "is_string": {
          "variables": [
            
          ],
          "name": "is_string",
          "call": "use function is_string()"
        },
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "tableName": {
          "variables": [
            
          ],
          "name": "tableName",
          "call": "public function tableName()"
        },
        "primaryKey": {
          "variables": [
            
          ],
          "name": "primaryKey",
          "call": "public function primaryKey()"
        },
        "model": {
          "variables": [
            "$className"
          ],
          "name": "model",
          "call": "public static function model($className)"
        },
        "relations": {
          "variables": [
            
          ],
          "name": "relations",
          "call": "public function relations()"
        },
        "attributeLabels": {
          "variables": [
            
          ],
          "name": "attributeLabels",
          "call": "public function attributeLabels()"
        },
        "getConfigParam": {
          "variables": [
            "$param",
            "$default"
          ],
          "name": "getConfigParam",
          "call": "public function getConfigParam($param,$default)"
        },
        "getValidationErrors": {
          "variables": [
            
          ],
          "name": "getValidationErrors",
          "call": "public function getValidationErrors()"
        },
        "getAllConfigParams": {
          "variables": [
            
          ],
          "name": "getAllConfigParams",
          "call": "public function getAllConfigParams()"
        },
        "reloadData": {
          "variables": [
            
          ],
          "name": "reloadData",
          "call": "public function reloadData()"
        },
        "localize": {
          "variables": [
            "$string"
          ],
          "name": "localize",
          "call": "public function localize($string)"
        },
        "getCurrentActionPermaname": {
          "variables": [
            
          ],
          "name": "getCurrentActionPermaname",
          "call": "public function getCurrentActionPermaname()"
        },
        "getActionidByPermaname": {
          "variables": [
            "$name"
          ],
          "name": "getActionidByPermaname",
          "call": "public function getActionidByPermaname($name)"
        },
        "rewriteActionConfigField": {
          "variables": [
            "$field",
            "$newcontent"
          ],
          "name": "rewriteActionConfigField",
          "call": "public function rewriteActionConfigField($field,$newcontent)",
          "comment": {
            "summary": "",
            "parameters": {
              "$field": "- backarrow\n      - hide_subject\n      - hide_menubar\n      - background_image_portrait"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "rewriteActionField": {
          "variables": [
            "$field",
            "$newcontent"
          ],
          "name": "rewriteActionField",
          "call": "public function rewriteActionField($field,$newcontent)",
          "comment": {
            "summary": "you can reconfigure any action properties with this",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getItemId": {
          "variables": [
            
          ],
          "name": "getItemId",
          "call": "public function getItemId()"
        },
        "getMenuId": {
          "variables": [
            
          ],
          "name": "getMenuId",
          "call": "public function getMenuId()",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getActionId": {
          "variables": [
            
          ],
          "name": "getActionId",
          "call": "public function getActionId()",
          "comment": {
            "summary": "Current action id (not the play action, but the actual configuration object id",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getValidationError": {
          "variables": [
            "$name"
          ],
          "name": "getValidationError",
          "call": "public function getValidationError($name)"
        },
        "setError": {
          "variables": [
            "$string"
          ],
          "name": "setError",
          "call": "public function setError($string)"
        },
        "getRuntimeErrors": {
          "variables": [
            
          ],
          "name": "getRuntimeErrors",
          "call": "public function getRuntimeErrors()"
        },
        "flushActionRoutes": {
          "variables": [
            "$actionid",
            "$actionpermaname"
          ],
          "name": "flushActionRoutes",
          "call": "public function flushActionRoutes($actionid,$actionpermaname)"
        }
      },
      "uses": {
        "array_flip": {
          "name": "array_flip",
          "call": "use function array_flip\n"
        },
        "BootstrapRouter": {
          "name": "BootstrapRouter",
          "call": "use Bootstrap\\Router\\BootstrapRouter\n"
        },
        "CActiveRecord": {
          "name": "CActiveRecord",
          "call": "use CActiveRecord\n"
        },
        "Aevariable": {
          "name": "Aevariable",
          "call": "use Aevariable\n"
        },
        "AeplayVariable": {
          "name": "AeplayVariable",
          "call": "use AeplayVariable\n"
        },
        "is_array": {
          "name": "is_array",
          "call": "use function is_array\n"
        },
        "is_string": {
          "name": "is_string",
          "call": "use function is_string\n\n"
        },
        "Variables": {
          "name": "Variables",
          "call": "use Variables\n    "
        },
        "Session": {
          "name": "Session",
          "call": "use Session\n    "
        },
        "DataHelpers": {
          "name": "DataHelpers",
          "call": "use DataHelpers\n    "
        },
        "Validators": {
          "name": "Validators",
          "call": "use Validators\n    "
        },
        "Mobilematching": {
          "name": "Mobilematching",
          "call": "use Mobilematching\n\n    "
        }
      },
      "public_properties": {
        "$configobj": {
          "name": "$configobj"
        },
        "$vars": {
          "name": "$vars"
        },
        "$varcontent": {
          "name": "$varcontent"
        },
        "$session_storage": {
          "name": "$session_storage"
        },
        "$click_parameters_to_save": {
          "name": "$click_parameters_to_save"
        },
        "$localizationComponent": {
          "name": "$localizationComponent"
        },
        "$submitvariables": {
          "name": "$submitvariables"
        },
        "$actionobj": {
          "name": "$actionobj"
        },
        "$playid": {
          "name": "$playid"
        },
        "$appid": {
          "name": "$appid"
        },
        "$userid": {
          "name": "$userid"
        },
        "$router": {
          "name": "$router"
        },
        "$action_id": {
          "name": "$action_id"
        },
        "$actionid": {
          "name": "$actionid"
        },
        "$menus": {
          "name": "$menus"
        },
        "$msgcount": {
          "name": "$msgcount"
        },
        "$bottom_menu_id": {
          "name": "$bottom_menu_id"
        },
        "$branchobj": {
          "name": "$branchobj"
        },
        "$validation_errors": {
          "name": "$validation_errors",
          "type": "array"
        },
        "$permanames": {
          "name": "$permanames"
        },
        "$rewriteconfigs": {
          "name": "$rewriteconfigs"
        },
        "$rewriteactionfield": {
          "name": "$rewriteactionfield"
        },
        "$mobilematchingobj": {
          "name": "$mobilematchingobj"
        },
        "$mobilematchingmetaobj": {
          "name": "$mobilematchingmetaobj"
        },
        "$bottom_menu_color_background": {
          "name": "$bottom_menu_color_background"
        },
        "$bottom_menu_color_text": {
          "name": "$bottom_menu_color_text"
        }
      },
      "private_properties": {
        "$current_itemid": {
          "name": "$current_itemid"
        },
        "$errors": {
          "name": "$errors"
        }
      }
    },
    {
      "file_name": "Models\/DataHelpers.php",
      "doc_comment": "namespace Bootstrap\\Models\n\n",
      "class": false,
      "methods": {
        "array_flip": {
          "variables": [
            
          ],
          "name": "array_flip",
          "call": "use function array_flip()"
        },
        "getCountryCodes": {
          "variables": [
            
          ],
          "name": "getCountryCodes",
          "call": "public function getCountryCodes()"
        },
        "getCountryCode": {
          "variables": [
            
          ],
          "name": "getCountryCode",
          "call": "public function getCountryCode()"
        },
        "setUserAddress": {
          "variables": [
            
          ],
          "name": "setUserAddress",
          "call": "public function setUserAddress()"
        },
        "findPlayFromVariables": {
          "variables": [
            "$var1",
            "$var2",
            "$var1_value",
            "$var2_value"
          ],
          "name": "findPlayFromVariables",
          "call": "public function findPlayFromVariables($var1,$var2,$var1_value,$var2_value)"
        },
        "findPlayFromVariable": {
          "variables": [
            "$varname",
            "$varvalue"
          ],
          "name": "findPlayFromVariable",
          "call": "public function findPlayFromVariable($varname,$varvalue)"
        }
      },
      "uses": {
        "array_flip": {
          "name": "array_flip",
          "call": "use function array_flip\n"
        },
        "ThirdpartyServices": {
          "name": "ThirdpartyServices",
          "call": "use ThirdpartyServices\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Models\/Mobilematching.php",
      "doc_comment": "namespace Bootstrap\\Models\n\n",
      "class": false,
      "methods": {
        "array_flip": {
          "variables": [
            
          ],
          "name": "array_flip",
          "call": "use function array_flip()"
        },
        "is_numeric": {
          "variables": [
            
          ],
          "name": "is_numeric",
          "call": "use function is_numeric()"
        },
        "initMobileMatching": {
          "variables": [
            "$otheruserid",
            "$debug"
          ],
          "name": "initMobileMatching",
          "call": "public function initMobileMatching($otheruserid,$debug)"
        }
      },
      "uses": {
        "Aegame": {
          "name": "Aegame",
          "call": "use Aegame\n"
        },
        "Aevariable": {
          "name": "Aevariable",
          "call": "use Aevariable\n"
        },
        "array_flip": {
          "name": "array_flip",
          "call": "use function array_flip\n"
        },
        "is_numeric": {
          "name": "is_numeric",
          "call": "use function is_numeric\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Models\/Session.php",
      "doc_comment": "namespace Bootstrap\\Models\n\n",
      "class": false,
      "methods": {
        "setRoute": {
          "variables": [
            "$route",
            "$persist_route",
            "$actionid"
          ],
          "name": "setRoute",
          "call": "public function setRoute($route,$persist_route,$actionid)"
        },
        "sessionSetArray": {
          "variables": [
            "$array"
          ],
          "name": "sessionSetArray",
          "call": "public function sessionSetArray($array)"
        },
        "sessionSet": {
          "variables": [
            "$key",
            "$value"
          ],
          "name": "sessionSet",
          "call": "public function sessionSet($key,$value)"
        },
        "sessionGet": {
          "variables": [
            "$key"
          ],
          "name": "sessionGet",
          "call": "public function sessionGet($key)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Models\/Validators.php",
      "doc_comment": "namespace Bootstrap\\Models\n\n",
      "class": false,
      "methods": {
        "validateEmail": {
          "variables": [
            "$email"
          ],
          "name": "validateEmail",
          "call": "public function validateEmail($email)"
        },
        "validateWebsite": {
          "variables": [
            "$url"
          ],
          "name": "validateWebsite",
          "call": "public function validateWebsite($url)"
        },
        "validatePassword": {
          "variables": [
            "$password",
            "$strict"
          ],
          "name": "validatePassword",
          "call": "public function validatePassword($password,$strict)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Models\/Variables.php",
      "doc_comment": "namespace Bootstrap\\Models\n\n",
      "class": false,
      "methods": {
        "array_flip": {
          "variables": [
            
          ],
          "name": "array_flip",
          "call": "use function array_flip()"
        },
        "is_numeric": {
          "variables": [
            
          ],
          "name": "is_numeric",
          "call": "use function is_numeric()"
        },
        "getVariableId": {
          "variables": [
            "$varname"
          ],
          "name": "getVariableId",
          "call": "public function getVariableId($varname)"
        },
        "getVariableName": {
          "variables": [
            "$varid"
          ],
          "name": "getVariableName",
          "call": "public function getVariableName($varid)"
        },
        "getGlobalVariableByName": {
          "variables": [
            "$varname"
          ],
          "name": "getGlobalVariableByName",
          "call": "public function getGlobalVariableByName($varname)"
        },
        "saveNamedVariables": {
          "variables": [
            "$variables",
            "$exclude"
          ],
          "name": "saveNamedVariables",
          "call": "public function saveNamedVariables($variables,$exclude)"
        },
        "getSavedVariable": {
          "variables": [
            "$varname",
            "$default"
          ],
          "name": "getSavedVariable",
          "call": "public function getSavedVariable($varname,$default)"
        },
        "getVariables": {
          "variables": [
            "$gid"
          ],
          "name": "getVariables",
          "call": "public static function getVariables($gid)"
        },
        "getVariableContent": {
          "variables": [
            "$playid"
          ],
          "name": "getVariableContent",
          "call": "public static function getVariableContent($playid)"
        },
        "getSubmittedVariableByName": {
          "variables": [
            "$varname",
            "$default"
          ],
          "name": "getSubmittedVariableByName",
          "call": "public function getSubmittedVariableByName($varname,$default)"
        },
        "getAllSubmittedVariables": {
          "variables": [
            
          ],
          "name": "getAllSubmittedVariables",
          "call": "public function getAllSubmittedVariables()"
        },
        "getAllSubmittedVariablesByName": {
          "variables": [
            
          ],
          "name": "getAllSubmittedVariablesByName",
          "call": "public function getAllSubmittedVariablesByName()"
        },
        "saveVariables": {
          "variables": [
            "$vars",
            "$playid",
            "$exclude"
          ],
          "name": "saveVariables",
          "call": "public static function saveVariables($vars,$playid,$exclude)"
        },
        "saveVariable": {
          "variables": [
            "$variable",
            "$value"
          ],
          "name": "saveVariable",
          "call": "public function saveVariable($variable,$value)"
        },
        "deleteVariable": {
          "variables": [
            "$variablename"
          ],
          "name": "deleteVariable",
          "call": "public function deleteVariable($variablename)"
        },
        "loadVariables": {
          "variables": [
            
          ],
          "name": "loadVariables",
          "call": "public function loadVariables()"
        },
        "loadVariableContent": {
          "variables": [
            "$force"
          ],
          "name": "loadVariableContent",
          "call": "public function loadVariableContent($force)"
        },
        "foreignVariablesGet": {
          "variables": [
            "$playid"
          ],
          "name": "foreignVariablesGet",
          "call": "public function foreignVariablesGet($playid)"
        },
        "foreignVariableSave": {
          "variables": [
            "$variablename",
            "$value",
            "$playid"
          ],
          "name": "foreignVariableSave",
          "call": "public function foreignVariableSave($variablename,$value,$playid)"
        }
      },
      "uses": {
        "Aegame": {
          "name": "Aegame",
          "call": "use Aegame\n"
        },
        "Aevariable": {
          "name": "Aevariable",
          "call": "use Aevariable\n"
        },
        "array_flip": {
          "name": "array_flip",
          "call": "use function array_flip\n"
        },
        "is_numeric": {
          "name": "is_numeric",
          "call": "use function is_numeric\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Router\/BootstrapRouter.php",
      "doc_comment": "namespace Bootstrap\\Router\n\n",
      "class": "class BootstrapRouter implements BootstrapRouterInterface",
      "methods": {
        "array_pop": {
          "variables": [
            
          ],
          "name": "array_pop",
          "call": "use function array_pop()"
        },
        "basename": {
          "variables": [
            
          ],
          "name": "basename",
          "call": "use function basename()"
        },
        "classExists": {
          "variables": [
            
          ],
          "name": "classExists",
          "call": "use function classExists()"
        },
        "Composer": {
          "variables": [
            
          ],
          "name": "Composer",
          "call": "use function Composer()"
        },
        "explode": {
          "variables": [
            
          ],
          "name": "explode",
          "call": "use function explode()"
        },
        "file_exists": {
          "variables": [
            
          ],
          "name": "file_exists",
          "call": "use function file_exists()"
        },
        "file_get_contents": {
          "variables": [
            
          ],
          "name": "file_get_contents",
          "call": "use function file_get_contents()"
        },
        "getNameSpacePath": {
          "variables": [
            
          ],
          "name": "getNameSpacePath",
          "call": "use function getNameSpacePath()"
        },
        "implode": {
          "variables": [
            
          ],
          "name": "implode",
          "call": "use function implode()"
        },
        "method_exists": {
          "variables": [
            
          ],
          "name": "method_exists",
          "call": "use function method_exists()"
        },
        "stristr": {
          "variables": [
            
          ],
          "name": "stristr",
          "call": "use function stristr()"
        },
        "strtolower": {
          "variables": [
            
          ],
          "name": "strtolower",
          "call": "use function strtolower()"
        },
        "strtoupper": {
          "variables": [
            
          ],
          "name": "strtoupper",
          "call": "use function strtoupper()"
        },
        "ucfirst": {
          "variables": [
            
          ],
          "name": "ucfirst",
          "call": "use function ucfirst()"
        },
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "checkExistence": {
          "variables": [
            "$primary",
            "$secondary"
          ],
          "name": "checkExistence",
          "call": "private function checkExistence($primary,$secondary)"
        },
        "getController": {
          "variables": [
            "$class"
          ],
          "name": "getController",
          "call": "public function getController($class)"
        },
        "getComponent": {
          "variables": [
            "$class"
          ],
          "name": "getComponent",
          "call": "public function getComponent($class)"
        },
        "getMainPath": {
          "variables": [
            
          ],
          "name": "getMainPath",
          "call": "private function getMainPath()"
        },
        "getView": {
          "variables": [
            "$class"
          ],
          "name": "getView",
          "call": "public function getView($class)",
          "comment": {
            "summary": "",
            "parameters": {
              "$class": "-- class hierarchy coming from ArticleFactory"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "configureNames": {
          "variables": [
            "$route",
            "$include_menuid"
          ],
          "name": "configureNames",
          "call": "private function configureNames($route,$include_menuid)"
        },
        "setRoute": {
          "variables": [
            
          ],
          "name": "setRoute",
          "call": "private function setRoute()"
        },
        "prepareView": {
          "variables": [
            
          ],
          "name": "prepareView",
          "call": "public function prepareView()"
        }
      },
      "uses": {
        "array_pop": {
          "name": "array_pop",
          "call": "use function array_pop\n"
        },
        "basename": {
          "name": "basename",
          "call": "use function basename\n"
        },
        "BootstrapRouterGetters": {
          "name": "BootstrapRouterGetters",
          "call": "use \\Bootstrap\\Router\\BootstrapRouterGetters\n\n    "
        },
        "classExists": {
          "name": "classExists",
          "call": "use function classExists\n"
        },
        "includeFile": {
          "name": "includeFile",
          "call": "use function Composer\\Autoload\\includeFile\n"
        },
        "explode": {
          "name": "explode",
          "call": "use function explode\n"
        },
        "file_exists": {
          "name": "file_exists",
          "call": "use function file_exists\n"
        },
        "file_get_contents": {
          "name": "file_get_contents",
          "call": "use function file_get_contents\n"
        },
        "getNameSpacePath": {
          "name": "getNameSpacePath",
          "call": "use function getNameSpacePath\n"
        },
        "implode": {
          "name": "implode",
          "call": "use function implode\n"
        },
        "method_exists": {
          "name": "method_exists",
          "call": "use function method_exists\n"
        },
        "stristr": {
          "name": "stristr",
          "call": "use function stristr\n"
        },
        "strtolower": {
          "name": "strtolower",
          "call": "use function strtolower\n"
        },
        "strtoupper": {
          "name": "strtoupper",
          "call": "use function strtoupper\n"
        },
        "ucfirst": {
          "name": "ucfirst",
          "call": "use function ucfirst\n\n"
        }
      },
      "public_properties": {
        "$phpstorm_bugfix": {
          "name": "$phpstorm_bugfix"
        },
        "$view": {
          "name": "$view"
        },
        "$model": {
          "name": "$model"
        },
        "$menuid": {
          "name": "$menuid"
        },
        "$new_menuid": {
          "name": "$new_menuid"
        },
        "$actionid": {
          "name": "$actionid"
        },
        "$action_id": {
          "name": "$action_id"
        },
        "$view_name": {
          "name": "$view_name"
        },
        "$controller": {
          "name": "$controller"
        }
      },
      "private_properties": {
        "$action_name": {
          "name": "$action_name"
        },
        "$controller_name": {
          "name": "$controller_name"
        },
        "$error": {
          "name": "$error"
        },
        "$view_data": {
          "name": "$view_data"
        },
        "$controller_path": {
          "name": "$controller_path"
        },
        "$component_path": {
          "name": "$component_path"
        },
        "$action_shortname": {
          "name": "$action_shortname"
        }
      }
    },
    {
      "file_name": "Router\/BootstrapRouterGetters.php",
      "doc_comment": "namespace Bootstrap\\Router\n\n",
      "class": false,
      "methods": {
        "getViewName": {
          "variables": [
            
          ],
          "name": "getViewName",
          "call": "public function getViewName()",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getActionName": {
          "variables": [
            
          ],
          "name": "getActionName",
          "call": "public function getActionName()",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getMenuId": {
          "variables": [
            
          ],
          "name": "getMenuId",
          "call": "public function getMenuId()",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getControllerName": {
          "variables": [
            
          ],
          "name": "getControllerName",
          "call": "public function getControllerName()",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getError": {
          "variables": [
            
          ],
          "name": "getError",
          "call": "public function getError()",
          "comment": {
            "summary": "",
            "parameters": [
              
            ],
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        },
        "getViewData": {
          "variables": [
            
          ],
          "name": "getViewData",
          "call": "public function getViewData()"
        },
        "setActionShortname": {
          "variables": [
            "$name"
          ],
          "name": "setActionShortname",
          "call": "public function setActionShortname($name)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Router\/BootstrapRouterInterface.php",
      "doc_comment": "namespace Bootstrap\\Router\n\n",
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Views\/BootstrapView.php",
      "doc_comment": "namespace Bootstrap\\Views\n\n",
      "class": "class BootstrapView extends BootstrapComponent implements BootstrapViewInterface",
      "methods": {
        "defined": {
          "variables": [
            
          ],
          "name": "defined",
          "call": "use function defined()"
        },
        "is_array": {
          "variables": [
            
          ],
          "name": "is_array",
          "call": "use function is_array()"
        },
        "is_bool": {
          "variables": [
            
          ],
          "name": "is_bool",
          "call": "use function is_bool()"
        },
        "is_float": {
          "variables": [
            
          ],
          "name": "is_float",
          "call": "use function is_float()"
        },
        "is_int": {
          "variables": [
            
          ],
          "name": "is_int",
          "call": "use function is_int()"
        },
        "is_object": {
          "variables": [
            
          ],
          "name": "is_object",
          "call": "use function is_object()"
        },
        "is_string": {
          "variables": [
            
          ],
          "name": "is_string",
          "call": "use function is_string()"
        },
        "property_exists": {
          "variables": [
            
          ],
          "name": "property_exists",
          "call": "use function property_exists()"
        },
        "__construct": {
          "variables": [
            "$obj"
          ],
          "name": "__construct",
          "call": "public function __construct($obj)"
        },
        "getBottomMenu": {
          "variables": [
            
          ],
          "name": "getBottomMenu",
          "call": "public function getBottomMenu()"
        },
        "tab1": {
          "variables": [
            
          ],
          "name": "tab1",
          "call": "public function tab1()"
        },
        "setViewData": {
          "variables": [
            "$data"
          ],
          "name": "setViewData",
          "call": "public function setViewData($data)"
        }
      },
      "uses": {
        "BootstrapComponent": {
          "name": "BootstrapComponent",
          "call": "use Bootstrap\\Components\\BootstrapComponent\n"
        },
        "ComponentHelpers": {
          "name": "ComponentHelpers",
          "call": "use Bootstrap\\Components\\ComponentHelpers\n"
        },
        "Elements": {
          "name": "Elements",
          "call": "use Bootstrap\\Components\\Elements as Elements\n"
        },
        "defined": {
          "name": "defined",
          "call": "use function defined\n"
        },
        "is_array": {
          "name": "is_array",
          "call": "use function is_array\n"
        },
        "is_bool": {
          "name": "is_bool",
          "call": "use function is_bool\n"
        },
        "is_float": {
          "name": "is_float",
          "call": "use function is_float\n"
        },
        "is_int": {
          "name": "is_int",
          "call": "use function is_int\n"
        },
        "is_object": {
          "name": "is_object",
          "call": "use function is_object\n"
        },
        "is_string": {
          "name": "is_string",
          "call": "use function is_string\n"
        },
        "property_exists": {
          "name": "property_exists",
          "call": "use function property_exists\n"
        },
        "stdClass": {
          "name": "stdClass",
          "call": "use stdClass\n\n"
        },
        "ViewHelpers": {
          "name": "ViewHelpers",
          "call": "use ViewHelpers\n    "
        },
        "ViewGetters": {
          "name": "ViewGetters",
          "call": "use ViewGetters\n\n    "
        }
      },
      "public_properties": {
        "$phpstorm_bugfix": {
          "name": "$phpstorm_bugfix"
        },
        "$model": {
          "name": "$model"
        },
        "$components": {
          "name": "$components"
        },
        "$colors": {
          "name": "$colors"
        },
        "$menuid": {
          "name": "$menuid"
        },
        "$actionid": {
          "name": "$actionid"
        },
        "$data": {
          "name": "$data"
        },
        "$layout": {
          "name": "$layout"
        },
        "$color_text_color": {
          "name": "$color_text_color"
        },
        "$color_icon_color": {
          "name": "$color_icon_color"
        },
        "$color_background_color": {
          "name": "$color_background_color"
        },
        "$color_button_text": {
          "name": "$color_button_text"
        },
        "$color_dark_button_text": {
          "name": "$color_dark_button_text"
        },
        "$color_top_bar_text_color": {
          "name": "$color_top_bar_text_color"
        },
        "$color_top_bar_icon_color": {
          "name": "$color_top_bar_icon_color"
        },
        "$color_button_more_info_color": {
          "name": "$color_button_more_info_color"
        },
        "$color_button_more_info_icon_color": {
          "name": "$color_button_more_info_icon_color"
        },
        "$color_button_more_info_text_color": {
          "name": "$color_button_more_info_text_color"
        },
        "$color_item_text_color": {
          "name": "$color_item_text_color"
        },
        "$color_top_bar_color": {
          "name": "$color_top_bar_color"
        },
        "$color_button_color": {
          "name": "$color_button_color"
        },
        "$color_item_color": {
          "name": "$color_item_color"
        },
        "$color_button_icon_color": {
          "name": "$color_button_icon_color"
        },
        "$color_button_text_color": {
          "name": "$color_button_text_color"
        },
        "$color_side_menu_color": {
          "name": "$color_side_menu_color"
        },
        "$color_side_menu_text_color": {
          "name": "$color_side_menu_text_color"
        },
        "$color_topbar_hilite": {
          "name": "$color_topbar_hilite"
        },
        "$bottom_menu_id": {
          "name": "$bottom_menu_id"
        },
        "$bottom_menu_json": {
          "name": "$bottom_menu_json"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Views\/BootstrapViewInterface.php",
      "doc_comment": "namespace Bootstrap\\Views\n\n",
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Views\/ViewGetters.php",
      "doc_comment": "namespace Bootstrap\\Views\n\n",
      "class": false,
      "methods": {
        "is_numeric": {
          "variables": [
            
          ],
          "name": "is_numeric",
          "call": "use function is_numeric()"
        },
        "getData": {
          "variables": [
            "$field",
            "$type",
            "$required"
          ],
          "name": "getData",
          "call": "public function getData($field,$type,$required)",
          "comment": {
            "summary": "",
            "parameters": {
              "$required": "param bool $required -- if this is set to true, an empty value will display an erorr on the client"
            },
            "object": [
              
            ],
            "examples": [
              
            ]
          }
        }
      },
      "uses": {
        "is_numeric": {
          "name": "is_numeric",
          "call": "use function is_numeric\n\n"
        }
      },
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "Views\/ViewHelpers.php",
      "doc_comment": "namespace Bootstrap\\Views\n\n",
      "class": false,
      "methods": {
        "actionViewerror": {
          "variables": [
            
          ],
          "name": "actionViewerror",
          "call": "public function actionViewerror()"
        },
        "setError": {
          "variables": [
            "$msg"
          ],
          "name": "setError",
          "call": "public function setError($msg)"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/controllers\/MobileexampleController.php",
      "doc_comment": false,
      "class": "class MobileexampleController extends ArticleController",
      "methods": {
        "init": {
          "variables": [
            
          ],
          "name": "init",
          "call": "public function init()"
        },
        "getExampleString": {
          "variables": [
            
          ],
          "name": "getExampleString",
          "call": "public function getExampleString()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$data": {
          "name": "$data"
        },
        "$theme": {
          "name": "$theme"
        },
        "$dataobj": {
          "name": "$dataobj"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/forms\/Mobileexample.php",
      "doc_comment": false,
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/models\/MobileexampleAccessor.php",
      "doc_comment": false,
      "class": "class MobileexampleAccessor extends ArticleModel",
      "methods": {
        "getList": {
          "variables": [
            "$playid",
            "$keywordsearch",
            "$keywordvariable",
            "$limit"
          ],
          "name": "getList",
          "call": "public static function getList($playid,$keywordsearch,$keywordvariable,$limit)"
        },
        "getInitialWordList": {
          "variables": [
            "$limit"
          ],
          "name": "getInitialWordList",
          "call": "public static function getInitialWordList($limit)"
        },
        "getLetter": {
          "variables": [
            "$key",
            "$loosematch",
            "$limit"
          ],
          "name": "getLetter",
          "call": "public static function getLetter($key,$loosematch,$limit)"
        },
        "getWords": {
          "variables": [
            
          ],
          "name": "getWords",
          "call": "public static function getWords()"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/models\/MobileexampleModel.php",
      "doc_comment": false,
      "class": "class MobileexampleModel extends ArticleModel",
      "methods": {
        "readRss": {
          "variables": [
            
          ],
          "name": "readRss",
          "call": "public function readRss()"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/sql\/Variables.php",
      "doc_comment": false,
      "class": false,
      "methods": [
        
      ],
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/themes\/default\/controllers\/MobileexampleDefaultController.php",
      "doc_comment": false,
      "class": "class MobileexampleDefaultController extends MobileexampleView",
      "methods": {
        "getExampleString": {
          "variables": [
            
          ],
          "name": "getExampleString",
          "call": "public function getExampleString()"
        }
      },
      "uses": [
        
      ],
      "public_properties": [
        
      ],
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/themes\/default\/views\/MobileexampleDefaultView.php",
      "doc_comment": false,
      "class": "class MobileexampleDefaultView extends MobileexampleDefaultController",
      "methods": {
        "tab1": {
          "variables": [
            
          ],
          "name": "tab1",
          "call": "public function tab1()"
        },
        "tab2": {
          "variables": [
            
          ],
          "name": "tab2",
          "call": "public function tab2()"
        },
        "tab3": {
          "variables": [
            
          ],
          "name": "tab3",
          "call": "public function tab3()"
        },
        "setHeader": {
          "variables": [
            
          ],
          "name": "setHeader",
          "call": "public function setHeader()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$data": {
          "name": "$data"
        },
        "$theme": {
          "name": "$theme"
        }
      },
      "private_properties": [
        
      ]
    },
    {
      "file_name": "packages\/actionMobileexample\/views\/MobileexampleView.php",
      "doc_comment": false,
      "class": "class MobileexampleView extends MobileexampleController",
      "methods": {
        "tab1": {
          "variables": [
            
          ],
          "name": "tab1",
          "call": "public function tab1()"
        },
        "tab2": {
          "variables": [
            
          ],
          "name": "tab2",
          "call": "public function tab2()"
        },
        "tab3": {
          "variables": [
            
          ],
          "name": "tab3",
          "call": "public function tab3()"
        },
        "getExampleString": {
          "variables": [
            
          ],
          "name": "getExampleString",
          "call": "public function getExampleString()"
        },
        "setHeader": {
          "variables": [
            
          ],
          "name": "setHeader",
          "call": "public function setHeader()"
        }
      },
      "uses": [
        
      ],
      "public_properties": {
        "$data": {
          "name": "$data"
        },
        "$theme": {
          "name": "$theme"
        }
      },
      "private_properties": [
        
      ]
    }
  ]
}